{
    "project": {},
    "files": {
        "..\\..\\source\\core\\animation\\AnimationMixer.js": {
            "name": "..\\..\\source\\core\\animation\\AnimationMixer.js",
            "modules": {},
            "classes": {
                "AnimationMixer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\input\\Gamepad.js": {
            "name": "..\\..\\source\\core\\input\\Gamepad.js",
            "modules": {
                "Input": 1
            },
            "classes": {
                "Gamepad": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\input\\Gyroscope.js": {
            "name": "..\\..\\source\\core\\input\\Gyroscope.js",
            "modules": {},
            "classes": {
                "Gyroscope": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\input\\Key.js": {
            "name": "..\\..\\source\\core\\input\\Key.js",
            "modules": {},
            "classes": {
                "Key": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\input\\Keyboard.js": {
            "name": "..\\..\\source\\core\\input\\Keyboard.js",
            "modules": {},
            "classes": {
                "Keyboard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\input\\Mouse.js": {
            "name": "..\\..\\source\\core\\input\\Mouse.js",
            "modules": {},
            "classes": {
                "Mouse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\loaders\\AudioLoader.js": {
            "name": "..\\..\\source\\core\\loaders\\AudioLoader.js",
            "modules": {
                "Loaders": 1
            },
            "classes": {
                "AudioLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\loaders\\FontLoader.js": {
            "name": "..\\..\\source\\core\\loaders\\FontLoader.js",
            "modules": {},
            "classes": {
                "FontLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\loaders\\GeometryLoader.js": {
            "name": "..\\..\\source\\core\\loaders\\GeometryLoader.js",
            "modules": {},
            "classes": {
                "GeometryLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\loaders\\ImageLoader.js": {
            "name": "..\\..\\source\\core\\loaders\\ImageLoader.js",
            "modules": {},
            "classes": {
                "ImageLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\loaders\\MaterialLoader.js": {
            "name": "..\\..\\source\\core\\loaders\\MaterialLoader.js",
            "modules": {},
            "classes": {
                "MaterialLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\loaders\\ObjectLoader.js": {
            "name": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "modules": {},
            "classes": {
                "ObjectLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\loaders\\TextureLoader.js": {
            "name": "..\\..\\source\\core\\loaders\\TextureLoader.js",
            "modules": {},
            "classes": {
                "TextureLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\loaders\\VideoLoader.js": {
            "name": "..\\..\\source\\core\\loaders\\VideoLoader.js",
            "modules": {},
            "classes": {
                "VideoLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\animation\\Skeleton.js": {
            "name": "..\\..\\source\\core\\objects\\animation\\Skeleton.js",
            "modules": {
                "Animation": 1
            },
            "classes": {
                "Skeleton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js": {
            "name": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "modules": {
                "Audio": 1
            },
            "classes": {
                "AudioEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js": {
            "name": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "modules": {},
            "classes": {
                "PositionalAudio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js": {
            "name": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "modules": {
                "Cameras": 1
            },
            "classes": {
                "OrthographicCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js": {
            "name": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "modules": {},
            "classes": {
                "PerspectiveCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js": {
            "name": "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js",
            "modules": {
                "Controls": 1
            },
            "classes": {
                "FirstPersonControls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\controls\\OrbitControls.js": {
            "name": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "modules": {},
            "classes": {
                "OrbitControls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\device\\KinectDevice.js": {
            "name": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "modules": {
                "Devices": 1
            },
            "classes": {
                "KinectDevice": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\device\\LeapMotion.js": {
            "name": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "modules": {},
            "classes": {
                "LeapMotion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\lights\\AmbientLight.js": {
            "name": "..\\..\\source\\core\\objects\\lights\\AmbientLight.js",
            "modules": {},
            "classes": {
                "AmbientLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\lights\\DirectionalLight.js": {
            "name": "..\\..\\source\\core\\objects\\lights\\DirectionalLight.js",
            "modules": {},
            "classes": {
                "DirectionalLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\lights\\HemisphereLight.js": {
            "name": "..\\..\\source\\core\\objects\\lights\\HemisphereLight.js",
            "modules": {},
            "classes": {
                "HemisphereLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\lights\\PointLight.js": {
            "name": "..\\..\\source\\core\\objects\\lights\\PointLight.js",
            "modules": {},
            "classes": {
                "PointLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\lights\\RectAreaLight.js": {
            "name": "..\\..\\source\\core\\objects\\lights\\RectAreaLight.js",
            "modules": {},
            "classes": {
                "RectAreaLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\lights\\SpotLight.js": {
            "name": "..\\..\\source\\core\\objects\\lights\\SpotLight.js",
            "modules": {},
            "classes": {
                "SpotLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\mesh\\Mesh.js": {
            "name": "..\\..\\source\\core\\objects\\mesh\\Mesh.js",
            "modules": {
                "Meshes": 1
            },
            "classes": {
                "Mesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\mesh\\SkinnedMesh.js": {
            "name": "..\\..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "modules": {},
            "classes": {
                "SkinnedMesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\mesh\\Text3D.js": {
            "name": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "modules": {},
            "classes": {
                "Text3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\misc\\Container.js": {
            "name": "..\\..\\source\\core\\objects\\misc\\Container.js",
            "modules": {
                "Misc": 1
            },
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\misc\\CubeCamera.js": {
            "name": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "modules": {},
            "classes": {
                "CubeCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\misc\\LensFlare.js": {
            "name": "..\\..\\source\\core\\objects\\misc\\LensFlare.js",
            "modules": {},
            "classes": {
                "LensFlare": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\misc\\Sky.js": {
            "name": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "modules": {
                "Lights": 1
            },
            "classes": {
                "Sky": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js": {
            "name": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "modules": {
                "Particles": 1
            },
            "classes": {
                "ParticleEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\physics\\PhysicsObject.js": {
            "name": "..\\..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "modules": {},
            "classes": {
                "PhysicsObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\script\\Script.js": {
            "name": "..\\..\\source\\core\\objects\\script\\Script.js",
            "modules": {
                "Script": 1
            },
            "classes": {
                "Script": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js": {
            "name": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "modules": {
                "Animations": 1
            },
            "classes": {
                "SpineAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\spine\\SpineTexture.js": {
            "name": "..\\..\\source\\core\\objects\\spine\\SpineTexture.js",
            "modules": {},
            "classes": {
                "SpineTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\sprite\\Sprite.js": {
            "name": "..\\..\\source\\core\\objects\\sprite\\Sprite.js",
            "modules": {
                "Sprite": 1
            },
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\Program.js": {
            "name": "..\\..\\source\\core\\objects\\Program.js",
            "modules": {
                "Core": 1
            },
            "classes": {
                "Program": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\objects\\Scene.js": {
            "name": "..\\..\\source\\core\\objects\\Scene.js",
            "modules": {},
            "classes": {
                "Scene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\antialiasing\\FXAAPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\antialiasing\\FXAAPass.js",
            "modules": {
                "Postprocessing": 1
            },
            "classes": {
                "FXAAPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\AdaptiveToneMappingPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\AdaptiveToneMappingPass.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\BloomPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\BloomPass.js",
            "modules": {},
            "classes": {
                "BloomPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\BokehPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\BokehPass.js",
            "modules": {},
            "classes": {
                "BokehPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\ColorifyPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\ColorifyPass.js",
            "modules": {},
            "classes": {
                "ColorifyPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\CopyPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\CopyPass.js",
            "modules": {},
            "classes": {
                "CopyPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\DotScreenPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\DotScreenPass.js",
            "modules": {},
            "classes": {
                "DotScreenPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\FilmPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\FilmPass.js",
            "modules": {},
            "classes": {
                "FilmPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\HueSaturationPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\HueSaturationPass.js",
            "modules": {},
            "classes": {
                "HueSaturationPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\RenderPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\RenderPass.js",
            "modules": {},
            "classes": {
                "RenderPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\SSAOPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\SSAOPass.js",
            "modules": {},
            "classes": {
                "SSAOPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\SobelPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\SobelPass.js",
            "modules": {},
            "classes": {
                "SobelPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\TechnicolorPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\TechnicolorPass.js",
            "modules": {},
            "classes": {
                "TechnicolorPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\pass\\UnrealBloomPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "modules": {},
            "classes": {
                "UnrealBloomPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\EffectComposer.js": {
            "name": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "modules": {},
            "classes": {
                "EffectComposer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\Pass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\Pass.js",
            "modules": {},
            "classes": {
                "Pass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\postprocessing\\ShaderPass.js": {
            "name": "..\\..\\source\\core\\postprocessing\\ShaderPass.js",
            "modules": {},
            "classes": {
                "ShaderPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\resources\\Audio.js": {
            "name": "..\\..\\source\\core\\resources\\Audio.js",
            "modules": {
                "Resources": 1
            },
            "classes": {
                "Audio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\resources\\Font.js": {
            "name": "..\\..\\source\\core\\resources\\Font.js",
            "modules": {},
            "classes": {
                "Font": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\resources\\Image.js": {
            "name": "..\\..\\source\\core\\resources\\Image.js",
            "modules": {},
            "classes": {
                "Image": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\resources\\Model.js": {
            "name": "..\\..\\source\\core\\resources\\Model.js",
            "modules": {},
            "classes": {
                "Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\resources\\Resource.js": {
            "name": "..\\..\\source\\core\\resources\\Resource.js",
            "modules": {},
            "classes": {
                "Resource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\resources\\ResourceManager.js": {
            "name": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "modules": {},
            "classes": {
                "ResourceManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\resources\\TextFile.js": {
            "name": "..\\..\\source\\core\\resources\\TextFile.js",
            "modules": {},
            "classes": {
                "TextFile": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\resources\\Video.js": {
            "name": "..\\..\\source\\core\\resources\\Video.js",
            "modules": {},
            "classes": {
                "Video": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\texture\\CanvasTexture.js": {
            "name": "..\\..\\source\\core\\texture\\CanvasTexture.js",
            "modules": {
                "Textures": 1
            },
            "classes": {
                "CanvasTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\texture\\CompressedTexture.js": {
            "name": "..\\..\\source\\core\\texture\\CompressedTexture.js",
            "modules": {},
            "classes": {
                "CompressedTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\texture\\CubeTexture.js": {
            "name": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "modules": {},
            "classes": {
                "CubeTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\texture\\SpriteSheetTexture.js": {
            "name": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "modules": {},
            "classes": {
                "SpriteSheetTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\texture\\Texture.js": {
            "name": "..\\..\\source\\core\\texture\\Texture.js",
            "modules": {},
            "classes": {
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\texture\\VideoTexture.js": {
            "name": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "modules": {},
            "classes": {
                "VideoTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\texture\\WebcamTexture.js": {
            "name": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "modules": {},
            "classes": {
                "WebcamTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\three\\core\\Object3D.js": {
            "name": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "modules": {
                "THREE": 1
            },
            "classes": {
                "Object3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\three\\materials\\Material.js": {
            "name": "..\\..\\source\\core\\three\\materials\\Material.js",
            "modules": {},
            "classes": {
                "Material": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\three\\scenes\\Fog.js": {
            "name": "..\\..\\source\\core\\three\\scenes\\Fog.js",
            "modules": {},
            "classes": {
                "Fog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\binary\\ArraybufferUtils.js": {
            "name": "..\\..\\source\\core\\utils\\binary\\ArraybufferUtils.js",
            "modules": {
                "BinaryUtils": 1
            },
            "classes": {
                "ArraybufferUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\binary\\Base64Utils.js": {
            "name": "..\\..\\source\\core\\utils\\binary\\Base64Utils.js",
            "modules": {},
            "classes": {
                "Base64Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\binary\\BufferUtils.js": {
            "name": "..\\..\\source\\core\\utils\\binary\\BufferUtils.js",
            "modules": {},
            "classes": {
                "BufferUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\binary\\ByteArrayUtils.js": {
            "name": "..\\..\\source\\core\\utils\\binary\\ByteArrayUtils.js",
            "modules": {},
            "classes": {
                "ByteArrayUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\struct\\Tree.js": {
            "name": "..\\..\\source\\core\\utils\\struct\\Tree.js",
            "modules": {},
            "classes": {
                "Tree": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\struct\\TreeUtils.js": {
            "name": "..\\..\\source\\core\\utils\\struct\\TreeUtils.js",
            "modules": {},
            "classes": {
                "TreeUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\timer\\AnimationTimer.js": {
            "name": "..\\..\\source\\core\\utils\\timer\\AnimationTimer.js",
            "modules": {},
            "classes": {
                "AnimationTimer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\timer\\Timer.js": {
            "name": "..\\..\\source\\core\\utils\\timer\\Timer.js",
            "modules": {},
            "classes": {
                "Timer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\EventManager.js": {
            "name": "..\\..\\source\\core\\utils\\EventManager.js",
            "modules": {
                "Utils": 1
            },
            "classes": {
                "EventManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\LocalStorage.js": {
            "name": "..\\..\\source\\core\\utils\\LocalStorage.js",
            "modules": {},
            "classes": {
                "LocalStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\MathUtils.js": {
            "name": "..\\..\\source\\core\\utils\\MathUtils.js",
            "modules": {},
            "classes": {
                "MathUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\ObjectUtils.js": {
            "name": "..\\..\\source\\core\\utils\\ObjectUtils.js",
            "modules": {},
            "classes": {
                "ObjectUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\utils\\PhysicsGenerator.js": {
            "name": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "modules": {
                "Physics": 1
            },
            "classes": {
                "PhysicsGenerator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\vr\\VRControls.js": {
            "name": "..\\..\\source\\core\\vr\\VRControls.js",
            "modules": {
                "VirtualReality": 1
            },
            "classes": {
                "VRControls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\FileSystem.js": {
            "name": "..\\..\\source\\core\\FileSystem.js",
            "modules": {
                "Files": 1
            },
            "classes": {
                "FileSystem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\source\\core\\Nunu.js": {
            "name": "..\\..\\source\\core\\Nunu.js",
            "modules": {
                "Runtime": 1
            },
            "classes": {
                "Nunu": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Animation": {
            "name": "Animation",
            "submodules": {},
            "elements": {},
            "classes": {
                "Skeleton": 1,
                "AnimationMixer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\animation\\Skeleton.js",
            "line": 3,
            "description": "Use an array of bones to create a skeleton that can be used by a SkinnedMesh."
        },
        "Input": {
            "name": "Input",
            "submodules": {},
            "elements": {},
            "classes": {
                "Gamepad": 1,
                "Gyroscope": 1,
                "Key": 1,
                "Keyboard": 1,
                "Mouse": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 3,
            "description": "Gamepad provides basic support for gamepads.\n\nSome gamepads require a button press to being detected.\n\nGamepad implementation across browsers is still fragmented, every browser implements it a bit differently, so test it on every target before deploying an application using it.\n\nFor more information about the Gamepad API state take look at the W3C Gamepad API page https://www.w3.org/TR/gamepad/."
        },
        "Loaders": {
            "name": "Loaders",
            "submodules": {},
            "elements": {},
            "classes": {
                "AudioLoader": 1,
                "FontLoader": 1,
                "GeometryLoader": 1,
                "ImageLoader": 1,
                "MaterialLoader": 1,
                "ObjectLoader": 1,
                "TextureLoader": 1,
                "VideoLoader": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\loaders\\VideoLoader.js",
            "line": 3,
            "description": "Audio loader can be used to load external audio resources."
        },
        "Audio": {
            "name": "Audio",
            "submodules": {},
            "elements": {},
            "classes": {
                "AudioEmitter": 1,
                "PositionalAudio": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 3,
            "description": "AudioEmitter is a Object3D used to play audio inside the scene."
        },
        "Cameras": {
            "name": "Cameras",
            "submodules": {},
            "elements": {},
            "classes": {
                "OrthographicCamera": 1,
                "PerspectiveCamera": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 3,
            "description": "Orthographic Camera is used for 2D like image projection.\n\nBased on THREE.OrthographicCamera, original documentation available at https://threejs.org/docs/index.html#Reference/Cameras/OrthographicCamera."
        },
        "Controls": {
            "name": "Controls",
            "submodules": {},
            "elements": {},
            "classes": {
                "FirstPersonControls": 1,
                "OrbitControls": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 3,
            "description": "First person controls can be controlled using the mouse and keyboard.\n\nProvides a navigations system familiar to the one found on FPS games.\n\nThe mouse left button can be used to look around, and the keyboard arrows for movement."
        },
        "Devices": {
            "name": "Devices",
            "submodules": {},
            "elements": {},
            "classes": {
                "KinectDevice": 1,
                "LeapMotion": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 3,
            "description": "Kinect device object.\n\nThis object is used to connect nunuStudio to a Microsoft Kinect V1, it only works in Microsoft Windows.\n\nThe operation of the kinect object depends on a server program used to connect to kinect that sends the data to nunuStudio via WebSocket.\n\nThe server software is available inside the tools folder in the nunuStudio repository, and communicates using the port 8181 in the localhost."
        },
        "Lights": {
            "name": "Lights",
            "submodules": {},
            "elements": {},
            "classes": {
                "Sky": 1,
                "AmbientLight": 1,
                "DirectionalLight": 1,
                "HemisphereLight": 1,
                "PointLight": 1,
                "RectAreaLight": 1,
                "SpotLight": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 3,
            "description": "Sky class if composed of a HemisphereLight, DirectionalLight and a dynamic generated Sky sphere geometry.\n\nThis object is composed by 3 internal objects\n\t- Hemisphere light\n\t- Directional Light\n\t- Mesh"
        },
        "Meshes": {
            "name": "Meshes",
            "submodules": {},
            "elements": {},
            "classes": {
                "Mesh": 1,
                "SkinnedMesh": 1,
                "Text3D": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 3,
            "description": "A Mesh combines a geometry and a material forming a complete rederizable object.\n\nBased on THREE.Mesh documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Objects/Mesh."
        },
        "Misc": {
            "name": "Misc",
            "submodules": {},
            "elements": {},
            "classes": {
                "Container": 1,
                "CubeCamera": 1,
                "LensFlare": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\misc\\LensFlare.js",
            "line": 3,
            "description": "Containers are used to group objects together."
        },
        "Particles": {
            "name": "Particles",
            "submodules": {},
            "elements": {},
            "classes": {
                "ParticleEmitter": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 3,
            "description": "Particle emitter is a wrapper for SPE particle system.\n\nSPE is a threejs based particle emitter engine.\n\nDocumentation for SPE particle engine can be found here https://squarefeet.github.io/ShaderParticleEngine/docs/api/index.html"
        },
        "Physics": {
            "name": "Physics",
            "submodules": {},
            "elements": {},
            "classes": {
                "PhysicsGenerator": 1,
                "PhysicsObject": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 3,
            "description": "Physics generator is used to create Cannon.js shapes from three.js geometries.\n\nCan be used with any object that contains a geometry.\n\nIt is based on the original Mesh2Shape converted by @donmccurdy."
        },
        "Script": {
            "name": "Script",
            "submodules": {},
            "elements": {},
            "classes": {
                "Script": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 1,
            "description": "Script objects are used to control other objects present in the scene.\n\nIt can access and change every object in the program and supports some events\n - initialize\n   - Called on app initialization, its called after all children elements are initialized, its safe to apply operations on other objects inside this method.\n - update(delta)\n   - Called on every frame after rendering\n - dispose\n   - Called when disposing the program\n - onMouseOver(intersections)\n   - Called on every frame if mouse is on top of one of the script children\n   - Receives an intersections array as argument.\n - onResize(x, y)\n   - Called every time the window is resized\n   - Receives width and height as parameters\n - onAppData(data)\n   - Called when receiving data sent by the host website\n\nCode written inside scripts have access to the following attributes:\n - scene\n - program\n - self\n   - Same as this reference but global in the script scope\n - Keyboard\n - Mouse\n\nThere is also access to the following functions\n - include\n   - Include a javascript file from resources, when including files the user needs to be carefull and clear manually global declarations"
        },
        "Animations": {
            "name": "Animations",
            "submodules": {},
            "elements": {},
            "classes": {
                "SpineAnimation": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 3,
            "description": "Spine animation object, to used with animation produced inside Esoteric spine.\n\nBased on the official threejs runtime code available at https://github.com/EsotericSoftware/spine-runtimes.\n\nMore information abou spine available here www.esotericsoftware.com."
        },
        "Textures": {
            "name": "Textures",
            "submodules": {},
            "elements": {},
            "classes": {
                "CanvasTexture": 1,
                "SpineTexture": 1,
                "CompressedTexture": 1,
                "CubeTexture": 1,
                "SpriteSheetTexture": 1,
                "Texture": 1,
                "VideoTexture": 1,
                "WebcamTexture": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "line": 3,
            "description": "Canvas textures can be used to draw content to the texture during runtime, using the context property.\n\nCanvas textures always start with black background and a red text \"Canvas Texture\"."
        },
        "Sprite": {
            "name": "Sprite",
            "submodules": {},
            "elements": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\sprite\\Sprite.js",
            "line": 3,
            "description": "Sprites allways face the screen are used for 2D elements.\n\nBased on THREE.Sprite documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Objects/Sprite."
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "elements": {},
            "classes": {
                "Program": 1,
                "Scene": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 3,
            "description": "Program class contains all the data of a nunuStudio program.\n\nProgram is also used to store and manage all available resources."
        },
        "Postprocessing": {
            "name": "Postprocessing",
            "submodules": {},
            "elements": {},
            "classes": {
                "FXAAPass": 1,
                "BloomPass": 1,
                "BokehPass": 1,
                "ColorifyPass": 1,
                "CopyPass": 1,
                "DotScreenPass": 1,
                "FilmPass": 1,
                "HueSaturationPass": 1,
                "RenderPass": 1,
                "SSAOPass": 1,
                "SobelPass": 1,
                "TechnicolorPass": 1,
                "UnrealBloomPass": 1,
                "EffectComposer": 1,
                "Pass": 1,
                "ShaderPass": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\postprocessing\\ShaderPass.js",
            "line": 3,
            "description": "Fast approximate anti-aliasing (FXAA) is an anti-aliasing algorithm to smooth jagged edges on post procesing effects.\n\nMore information about FXAA available here:\n - https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf",
            "author": "miibond"
        },
        "Resources": {
            "name": "Resources",
            "submodules": {},
            "elements": {},
            "classes": {
                "Audio": 1,
                "Font": 1,
                "Image": 1,
                "Model": 1,
                "Resource": 1,
                "ResourceManager": 1,
                "TextFile": 1,
                "Video": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\resources\\Video.js",
            "line": 3,
            "description": "Audio class is used to store audio data as a arraybuffer to be later used by objects with the WebAudio API."
        },
        "THREE": {
            "name": "THREE",
            "submodules": {},
            "elements": {},
            "classes": {
                "Object3D": 1,
                "Material": 1,
                "Fog": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\three\\scenes\\Fog.js",
            "line": 3,
            "description": "This is the base class for most objects in three.js and provides a set of properties and methods for manipulating objects in 3D space.\n\nThis page provides documentation for some of the main features of this class, the original documentation of this class can be found at https://threejs.org/docs/index.html#Reference/Core/Object3D.\n\nAll nunuStudio objects extend the Object3D class of some other higher level class from three.js."
        },
        "BinaryUtils": {
            "name": "BinaryUtils",
            "submodules": {},
            "elements": {},
            "classes": {
                "ArraybufferUtils": 1,
                "Base64Utils": 1,
                "BufferUtils": 1,
                "ByteArrayUtils": 1,
                "Tree": 1,
                "TreeUtils": 1,
                "AnimationTimer": 1,
                "Timer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\utils\\timer\\Timer.js",
            "line": 3,
            "description": "ArraybufferUtils contains methods to convert from and to ArrayBuffer binary format"
        },
        "Utils": {
            "name": "Utils",
            "submodules": {},
            "elements": {},
            "classes": {
                "EventManager": 1,
                "LocalStorage": 1,
                "MathUtils": 1,
                "ObjectUtils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\utils\\ObjectUtils.js",
            "line": 3,
            "description": "EventManager is used to manager DOM events creationg and destruction in a single function call.\n\nIt is used by objects to make it easier to add and remove events from global DOM objects."
        },
        "VirtualReality": {
            "name": "VirtualReality",
            "submodules": {},
            "elements": {},
            "classes": {
                "VRControls": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\vr\\VRControls.js",
            "line": 3,
            "description": "VRControl is used to get input from an HDM device and apply it to an Object."
        },
        "Files": {
            "name": "Files",
            "submodules": {},
            "elements": {},
            "classes": {
                "FileSystem": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 3,
            "description": "FileSystem is used to read and write files using nunuStudio.\n\nIts implements muitple solutions for each method depending on the platform (NodeJS, brower or cordova).\n\nSome operations are platform specific and might not work everywhere.",
            "static": 1
        },
        "Runtime": {
            "name": "Runtime",
            "submodules": {},
            "elements": {},
            "classes": {
                "Nunu": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 3,
            "description": "nunuStudio\nMIT license (http://opensource.org/licenses/MIT)\n  \nClass used to store nunuStudio development version and timestamp.\n\nContains methods to check browser feature support."
        }
    },
    "classes": {
        "AnimationMixer": {
            "name": "AnimationMixer",
            "shortname": "AnimationMixer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "file": "..\\..\\source\\core\\animation\\AnimationMixer.js",
            "line": 3,
            "description": "The AnimationMixer is a player for animations on a particular object in the scene.\n\nWhen multiple objects in the scene are animated independently, one AnimationMixer may be used for each object.\n\nThe object stores animations in its animations attribute, wich is an array an of animation clips.",
            "extends": "{AnimationMixer}",
            "params": [
                {
                    "name": "root",
                    "description": "Animation root object",
                    "type": "Object3D"
                }
            ]
        },
        "Gamepad": {
            "name": "Gamepad",
            "shortname": "Gamepad",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 3,
            "description": "Gamepad provides basic support for gamepads.\n\nSome gamepads require a button press to being detected.\n\nGamepad implementation across browsers is still fragmented, every browser implements it a bit differently, so test it on every target before deploying an application using it.\n\nFor more information about the Gamepad API state take look at the W3C Gamepad API page https://www.w3.org/TR/gamepad/."
        },
        "Gyroscope": {
            "name": "Gyroscope",
            "shortname": "Gyroscope",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "..\\..\\source\\core\\input\\Gyroscope.js",
            "line": 3,
            "description": "Gyroscope object can be used to get the orientation from the device."
        },
        "Key": {
            "name": "Key",
            "shortname": "Key",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "..\\..\\source\\core\\input\\Key.js",
            "line": 3,
            "description": "Key is used by Keyboard, Mouse, etc, to represent a key state."
        },
        "Keyboard": {
            "name": "Keyboard",
            "shortname": "Keyboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 3,
            "description": "Keyboard instance for input in sync with the running 3D application.\n\nThe keyboard object provided by scripts is automatically updated by the runtime handler."
        },
        "Mouse": {
            "name": "Mouse",
            "shortname": "Mouse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 3,
            "description": "Mouse instance for input in sync with the running 3D application.\n\nThe mouse object provided by scripts is automatically updated by the runtime handler.",
            "params": [
                {
                    "name": "domElement",
                    "description": "DOM element to craete the mouse events.",
                    "type": "DOM"
                },
                {
                    "name": "dontInitialize",
                    "description": "If true the mouse events are not created.",
                    "type": "Boolean"
                }
            ]
        },
        "AudioLoader": {
            "name": "AudioLoader",
            "shortname": "AudioLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "..\\..\\source\\core\\loaders\\AudioLoader.js",
            "line": 3,
            "description": "Audio loader can be used to load external audio resources.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "FontLoader": {
            "name": "FontLoader",
            "shortname": "FontLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "..\\..\\source\\core\\loaders\\FontLoader.js",
            "line": 3,
            "description": "FontLoader can be used to load external font resources.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "GeometryLoader": {
            "name": "GeometryLoader",
            "shortname": "GeometryLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "..\\..\\source\\core\\loaders\\GeometryLoader.js",
            "line": 3,
            "description": "Geometry loader can be used to load geometry files.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "ImageLoader": {
            "name": "ImageLoader",
            "shortname": "ImageLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "..\\..\\source\\core\\loaders\\ImageLoader.js",
            "line": 3,
            "description": "ImageLoader can be used to load external image resources.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "MaterialLoader": {
            "name": "MaterialLoader",
            "shortname": "MaterialLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "..\\..\\source\\core\\loaders\\MaterialLoader.js",
            "line": 3,
            "description": "MaterialLoader can be used to load external materials.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "ObjectLoader": {
            "name": "ObjectLoader",
            "shortname": "ObjectLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 3,
            "description": "Objectloader can be used to load external objects from files.\n\nAlso loads all resources attached to the objects being loaded.\n\nCan parse be used to load on runtime resources and objects from external isp project files.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "TextureLoader": {
            "name": "TextureLoader",
            "shortname": "TextureLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "..\\..\\source\\core\\loaders\\TextureLoader.js",
            "line": 3,
            "description": "TextureLoader can be used to load external textures.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "VideoLoader": {
            "name": "VideoLoader",
            "shortname": "VideoLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Loaders",
            "namespace": "",
            "file": "..\\..\\source\\core\\loaders\\VideoLoader.js",
            "line": 3,
            "description": "VideoLoader can be used to load external video resources.",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Skeleton": {
            "name": "Skeleton",
            "shortname": "Skeleton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\animation\\Skeleton.js",
            "line": 3,
            "description": "Use an array of bones to create a skeleton that can be used by a SkinnedMesh.",
            "author": "takahirox",
            "params": [
                {
                    "name": "bones",
                    "description": "Bone array.",
                    "type": "Array"
                },
                {
                    "name": "boneInverses",
                    "description": "An array of Matrix4.",
                    "type": "Array"
                }
            ]
        },
        "AudioEmitter": {
            "name": "AudioEmitter",
            "shortname": "AudioEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 3,
            "description": "AudioEmitter is a Object3D used to play audio inside the scene.",
            "author": "Reece Aaron Lecrivain",
            "params": [
                {
                    "name": "audio",
                    "description": "Audio used by this emitter",
                    "type": "Audio"
                }
            ],
            "extends": "{Audio}"
        },
        "PositionalAudio": {
            "name": "PositionalAudio",
            "shortname": "PositionalAudio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 3,
            "description": "PositionalAudio is used to play audio with positional audio effect using a WebAudio panner.\n\nUsing the positional audio object the sound is controlled by the camera that renders first in the scene.",
            "params": [
                {
                    "name": "audio",
                    "description": "Audio used by this emitter",
                    "type": "Audio"
                }
            ],
            "extends": "{AudioEmitter}"
        },
        "OrthographicCamera": {
            "name": "OrthographicCamera",
            "shortname": "OrthographicCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Cameras",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 3,
            "description": "Orthographic Camera is used for 2D like image projection.\n\nBased on THREE.OrthographicCamera, original documentation available at https://threejs.org/docs/index.html#Reference/Cameras/OrthographicCamera.",
            "extends": "{OrthographicCamera}",
            "params": [
                {
                    "name": "size",
                    "description": "Camera size relative to resize mode",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "Aspect ratio X/Y",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "Camera resize mode (RESIZE_HORIZONTAL or RESIZE_VERTICAL)",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "Near projection plane",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "Far projection plane",
                    "type": "Number"
                }
            ]
        },
        "PerspectiveCamera": {
            "name": "PerspectiveCamera",
            "shortname": "PerspectiveCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Cameras",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 3,
            "description": "Perspective camera, used for 3D scenes with objects getting smaller as they get away from the camera.\n\nBased on THREE.PerspectiveCamera, original documentation available at https://threejs.org/docs/index.html#Reference/Cameras/PerspectiveCamera.",
            "extends": "{PerspectiveCamera}",
            "params": [
                {
                    "name": "fov",
                    "description": "Field of view",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "Aspect ratio",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "Near projection plane (how closer can be objects visible by this camera)",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "Far projection plane (how far can be objects visible by this camera)",
                    "type": "Number"
                }
            ]
        },
        "FirstPersonControls": {
            "name": "FirstPersonControls",
            "shortname": "FirstPersonControls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controls",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 3,
            "description": "First person controls can be controlled using the mouse and keyboard.\n\nProvides a navigations system familiar to the one found on FPS games.\n\nThe mouse left button can be used to look around, and the keyboard arrows for movement.",
            "extends": "{Group}"
        },
        "OrbitControls": {
            "name": "OrbitControls",
            "shortname": "OrbitControls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controls",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 3,
            "description": "Orbit controls object can be controlled using the mouse.\n\nIt can be rotated using the mouse left button, moved with the mouse right button or mouse wheel.",
            "extends": "{Group}"
        },
        "KinectDevice": {
            "name": "KinectDevice",
            "shortname": "KinectDevice",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Devices",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 3,
            "description": "Kinect device object.\n\nThis object is used to connect nunuStudio to a Microsoft Kinect V1, it only works in Microsoft Windows.\n\nThe operation of the kinect object depends on a server program used to connect to kinect that sends the data to nunuStudio via WebSocket.\n\nThe server software is available inside the tools folder in the nunuStudio repository, and communicates using the port 8181 in the localhost.",
            "extends": "{Group}"
        },
        "LeapMotion": {
            "name": "LeapMotion",
            "shortname": "LeapMotion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Devices",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 3,
            "description": "Leap device object based on the official LeapJS runtime.\n\nUsed to connect nunuStudio to a leap motion hand tracker, works on Windows and MacOS.",
            "extends": "{Group}"
        },
        "AmbientLight": {
            "name": "AmbientLight",
            "shortname": "AmbientLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\lights\\AmbientLight.js",
            "line": 3,
            "description": "Ambient lights are used to create base ilumanition for the scene.\n\nThey are not influenced by position, scale or rotation.\n\nBased on THREE.AmbientLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/AmbientLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                }
            ],
            "extends": "{AmbientLight}"
        },
        "DirectionalLight": {
            "name": "DirectionalLight",
            "shortname": "DirectionalLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\lights\\DirectionalLight.js",
            "line": 3,
            "description": "A light that gets emitted in a specific direction.\n\nThis light will behave as though it is infinitely far away and the rays produced from it are all parallel.\n\nBased on THREE.DirectionalLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/DirectionalLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                }
            ],
            "extends": "{DirectionalLight}"
        },
        "HemisphereLight": {
            "name": "HemisphereLight",
            "shortname": "HemisphereLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\lights\\HemisphereLight.js",
            "line": 3,
            "description": "A light source positioned directly above the scene, with color fading from the sky color to the ground color.\n\nBased on THREE.HemisphereLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/HemisphereLight",
            "params": [
                {
                    "name": "skyColor",
                    "description": "Sky light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "groundColor",
                    "description": "Ground light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                }
            ],
            "extends": "{HemisphereLight}"
        },
        "PointLight": {
            "name": "PointLight",
            "shortname": "PointLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\lights\\PointLight.js",
            "line": 3,
            "description": "PointLights emit light from a single point in all directions.\n\nBased on THREE.PointLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/PointLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "Maximum PointLight range",
                    "type": "Number"
                },
                {
                    "name": "decay",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{PointLight}"
        },
        "RectAreaLight": {
            "name": "RectAreaLight",
            "shortname": "RectAreaLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\lights\\RectAreaLight.js",
            "line": 3,
            "description": "A RectAreLight emit light from a rectagular surface.\n\nBased on THREE.RectAreaLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/RectAreaLight",
            "params": [
                {
                    "name": "color",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{RectAreaLight}"
        },
        "SpotLight": {
            "name": "SpotLight",
            "shortname": "SpotLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\lights\\SpotLight.js",
            "line": 3,
            "description": "A SpotLight emit light from a point in a specific direction in a cone volume.\n\nSpotLight has a target that is always represented in words coordinates, and can be moved to change where the light is pointing at.\n\nBased on THREE.SpotLight documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Lights/SpotLight",
            "params": [
                {
                    "name": "color",
                    "description": "Light color in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "SpotLight maximum range",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "exponent",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "decay",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{SpotLight}"
        },
        "Mesh": {
            "name": "Mesh",
            "shortname": "Mesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\mesh\\Mesh.js",
            "line": 3,
            "description": "A Mesh combines a geometry and a material forming a complete rederizable object.\n\nBased on THREE.Mesh documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Objects/Mesh.",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry used by this mesh",
                    "type": "Geometry"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the superficie of the geometry",
                    "type": "Material"
                }
            ],
            "extends": "{Mesh}"
        },
        "SkinnedMesh": {
            "name": "SkinnedMesh",
            "shortname": "SkinnedMesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 3,
            "description": "SkinnedMesh is a Mesh that has a Skeleton attached.\n\nA skeleton contains bones that are used to animate the vertices of the geometry.\n\nBased on THREE.SkinnedMesh documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Objects/SkinnedMesh",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry used by this mesh",
                    "type": "Geometry"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the superficie of the geometry",
                    "type": "Material"
                }
            ],
            "extends": "{SkinnedMesh}"
        },
        "Text3D": {
            "name": "Text3D",
            "shortname": "Text3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 3,
            "description": "Special mesh type used to draw 3D text.\n\nIt receives a Font resource that is used to triangulate and extrude font data into a 3D mesh.",
            "params": [
                {
                    "name": "text",
                    "description": "Text to be draw",
                    "type": "String"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the superficie of the geometry",
                    "type": "Material"
                },
                {
                    "name": "font",
                    "description": "Font",
                    "type": "Font"
                },
                {
                    "name": "height",
                    "description": "Text height",
                    "type": "Number"
                },
                {
                    "name": "bevel",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "bevelThickness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "curveSegments",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{Mesh}"
        },
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Misc",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\misc\\Container.js",
            "line": 3,
            "description": "Containers are used to group objects together.",
            "extends": "{Group}"
        },
        "CubeCamera": {
            "name": "CubeCamera",
            "shortname": "CubeCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Misc",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 3,
            "description": "Reflection probes are used to create CubeTextures dinamically.\n\nThese CubeTextures can be attributed to materials programatically.",
            "author": "alteredq",
            "extends": "{Object3D}"
        },
        "LensFlare": {
            "name": "LensFlare",
            "shortname": "LensFlare",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Misc",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\misc\\LensFlare.js",
            "line": 3,
            "description": "LensFlare object can be used to simulate lens flare from lights.\n\nStores a list of Flares.\n\nFor optimal result LensFlare object should be attached to a light source.\n\nWorks with perspective and orthographic cameras.",
            "extends": "{Object3D}",
            "author": "tentone"
        },
        "Sky": {
            "name": "Sky",
            "shortname": "Sky",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 3,
            "description": "Sky class if composed of a HemisphereLight, DirectionalLight and a dynamic generated Sky sphere geometry.\n\nThis object is composed by 3 internal objects\n\t- Hemisphere light\n\t- Directional Light\n\t- Mesh",
            "params": [
                {
                    "name": "autoUpdate",
                    "description": "If true sky auto updated its state",
                    "type": "Boolean"
                },
                {
                    "name": "dayTime",
                    "description": "Day duration in seconds",
                    "type": "Number"
                },
                {
                    "name": "sunDistance",
                    "description": "Distance of the sun",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "Starting time",
                    "type": "Number"
                }
            ],
            "extends": "{Object3D}"
        },
        "ParticleEmitter": {
            "name": "ParticleEmitter",
            "shortname": "ParticleEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Particles",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 3,
            "description": "Particle emitter is a wrapper for SPE particle system.\n\nSPE is a threejs based particle emitter engine.\n\nDocumentation for SPE particle engine can be found here https://squarefeet.github.io/ShaderParticleEngine/docs/api/index.html",
            "extends": "{Points}"
        },
        "PhysicsObject": {
            "name": "PhysicsObject",
            "shortname": "PhysicsObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 3,
            "description": "Wrapper for cannon.js physics objects.\n\nPhysics coordinates are always calculated in local space, they should always be placed directly inside the scene or inside containers without any offset.\n\nnunuStudio includes tools to create cannon shapes from three geometry objects.\n\nDocumentation for cannon.js physics available here http://schteppe.github.io/cannon.js/docs/",
            "extends": "{Group}"
        },
        "Script": {
            "name": "Script",
            "shortname": "Script",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Script",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 1,
            "description": "Script objects are used to control other objects present in the scene.\n\nIt can access and change every object in the program and supports some events\n - initialize\n   - Called on app initialization, its called after all children elements are initialized, its safe to apply operations on other objects inside this method.\n - update(delta)\n   - Called on every frame after rendering\n - dispose\n   - Called when disposing the program\n - onMouseOver(intersections)\n   - Called on every frame if mouse is on top of one of the script children\n   - Receives an intersections array as argument.\n - onResize(x, y)\n   - Called every time the window is resized\n   - Receives width and height as parameters\n - onAppData(data)\n   - Called when receiving data sent by the host website\n\nCode written inside scripts have access to the following attributes:\n - scene\n - program\n - self\n   - Same as this reference but global in the script scope\n - Keyboard\n - Mouse\n\nThere is also access to the following functions\n - include\n   - Include a javascript file from resources, when including files the user needs to be carefull and clear manually global declarations",
            "extends": "{Object}",
            "params": [
                {
                    "name": "code",
                    "description": "Javascript code to be used by this script",
                    "type": "String"
                }
            ]
        },
        "SpineAnimation": {
            "name": "SpineAnimation",
            "shortname": "SpineAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animations",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 3,
            "description": "Spine animation object, to used with animation produced inside Esoteric spine.\n\nBased on the official threejs runtime code available at https://github.com/EsotericSoftware/spine-runtimes.\n\nMore information abou spine available here www.esotericsoftware.com.",
            "extends": "{spine.threejs.SkeletonMesh}",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "atlas",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "textures",
                    "description": "",
                    "type": "Array"
                }
            ]
        },
        "SpineTexture": {
            "name": "SpineTexture",
            "shortname": "SpineTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\spine\\SpineTexture.js",
            "line": 3,
            "description": "Spine animation textures adapted to work with nunuStudio textures.\n\nBased on SpineTexture from original spine runtime for three.js",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ]
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Sprite",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\sprite\\Sprite.js",
            "line": 3,
            "description": "Sprites allways face the screen are used for 2D elements.\n\nBased on THREE.Sprite documentation for the object can be found at https://threejs.org/docs/index.html#Reference/Objects/Sprite.",
            "params": [
                {
                    "name": "material",
                    "description": "Material used to draw sprites",
                    "type": "Material"
                }
            ],
            "extends": "{Script}"
        },
        "Program": {
            "name": "Program",
            "shortname": "Program",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 3,
            "description": "Program class contains all the data of a nunuStudio program.\n\nProgram is also used to store and manage all available resources.",
            "params": [
                {
                    "name": "name",
                    "description": "Program name",
                    "type": "String"
                }
            ],
            "extends": "{ResourceManager}"
        },
        "Scene": {
            "name": "Scene",
            "shortname": "Scene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 3,
            "description": "Scenes allow you to set up what and where is to be rendered by the engine.\n\nThis is where you place objects, lights and cameras.\n\nA program may contain multiple scenes, its possible to change between scene using scripts.\n \nScene three.js documentation available here https://threejs.org/docs/index.html#Reference/Scenes/Scene.",
            "extends": "{Scene}"
        },
        "FXAAPass": {
            "name": "FXAAPass",
            "shortname": "FXAAPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\antialiasing\\FXAAPass.js",
            "line": 3,
            "description": "Fast approximate anti-aliasing (FXAA) is an anti-aliasing algorithm to smooth jagged edges on post procesing effects.\n\nMore information about FXAA available here:\n - https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf"
        },
        "BloomPass": {
            "name": "BloomPass",
            "shortname": "BloomPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\BloomPass.js",
            "line": 3,
            "description": "Simple bloom effect pass.",
            "author": "alteredq / http://alteredqualia.com/",
            "params": [
                {
                    "name": "strength",
                    "description": "Bloom effect strength.",
                    "type": "Number"
                },
                {
                    "name": "kernelSize",
                    "description": "Bloom kernel size.",
                    "type": "Number"
                },
                {
                    "name": "sigma",
                    "description": "Sigma.",
                    "type": "Number"
                },
                {
                    "name": "resolution",
                    "description": "Bloom buffer resolution.",
                    "type": "Number"
                }
            ]
        },
        "BokehPass": {
            "name": "BokehPass",
            "shortname": "BokehPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\BokehPass.js",
            "line": 3,
            "description": "Depth-of-field post-process with bokeh shader.",
            "params": [
                {
                    "name": "focus",
                    "description": "Focus distance.",
                    "type": "Number"
                },
                {
                    "name": "aperture",
                    "description": "Camera aperture.",
                    "type": "Number"
                },
                {
                    "name": "maxblur",
                    "description": "Maximum level of blur.",
                    "type": "Number"
                }
            ]
        },
        "ColorifyPass": {
            "name": "ColorifyPass",
            "shortname": "ColorifyPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\ColorifyPass.js",
            "line": 3,
            "description": "Colorify pass can be used to colorify the scene."
        },
        "CopyPass": {
            "name": "CopyPass",
            "shortname": "CopyPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\CopyPass.js",
            "line": 3,
            "description": "Copy pass can be used to copy the actual content on the composer to the screen."
        },
        "DotScreenPass": {
            "name": "DotScreenPass",
            "shortname": "DotScreenPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\DotScreenPass.js",
            "line": 3,
            "description": "DotScreen pass generates a poster like effect on top of the scene.",
            "author": "alteredq / http://alteredqualia.com/",
            "params": [
                {
                    "name": "center",
                    "description": "Dot rotation center.",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "Dot rotation angle.",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "Dot scale.",
                    "type": "Number"
                }
            ]
        },
        "FilmPass": {
            "name": "FilmPass",
            "shortname": "FilmPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\FilmPass.js",
            "line": 3,
            "description": "Film pass is used to simulate a film/TV like effect.",
            "author": "alteredq / http://alteredqualia.com/"
        },
        "HueSaturationPass": {
            "name": "HueSaturationPass",
            "shortname": "HueSaturationPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\HueSaturationPass.js",
            "line": 3,
            "description": "Hue and saturation pass.",
            "params": [
                {
                    "name": "hue",
                    "description": "Hue rotation from -1 to 1",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "Color saturation from -1  to 1",
                    "type": "Number"
                }
            ]
        },
        "RenderPass": {
            "name": "RenderPass",
            "shortname": "RenderPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\RenderPass.js",
            "line": 3,
            "description": "Render pass is used to render the scene the same way as if were using the renderer directly.",
            "extends": "{Pass}"
        },
        "SSAOPass": {
            "name": "SSAOPass",
            "shortname": "SSAOPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 3,
            "description": "Screen space ambient occlusion (SSAO) pass is used to simulate ambient occlusion shadowing effect.\n\nMore information about SSAO here\n - http://developer.download.nvidia.com/SDK/10.5/direct3d/Source/ScreenSpaceAO/doc/ScreenSpaceAO.pdf",
            "author": "tentone"
        },
        "SobelPass": {
            "name": "SobelPass",
            "shortname": "SobelPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\SobelPass.js",
            "line": 3,
            "description": "Sobel pass is used to create a edge highlight effect with a sobel operator."
        },
        "TechnicolorPass": {
            "name": "TechnicolorPass",
            "shortname": "TechnicolorPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\TechnicolorPass.js",
            "line": 3,
            "description": "Simulate technicolor television colors."
        },
        "UnrealBloomPass": {
            "name": "UnrealBloomPass",
            "shortname": "UnrealBloomPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 3,
            "description": "Unreal engine like bloom effect pass.\n\nMore information available here\n - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/",
            "author": "spidersharma / http://eduperiment.com/",
            "params": [
                {
                    "name": "strength",
                    "description": "Bloom effect strength.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Bloom effect radius.",
                    "type": "Number"
                },
                {
                    "name": "threshold",
                    "description": "White point threshold.",
                    "type": "Number"
                }
            ]
        },
        "EffectComposer": {
            "name": "EffectComposer",
            "shortname": "EffectComposer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 3,
            "description": "The effect composer is used to organize multiple post-processing passes.\n\nIt is used by camera objects to organize the rendering pipeline."
        },
        "Pass": {
            "name": "Pass",
            "shortname": "Pass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\Pass.js",
            "line": 3,
            "description": "A render Pass is used to render something in the graphics pipeline.\n\nCan be used to render a scene, apply post processing effects, merge buffers,  etc."
        },
        "ShaderPass": {
            "name": "ShaderPass",
            "shortname": "ShaderPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Postprocessing",
            "namespace": "",
            "file": "..\\..\\source\\core\\postprocessing\\ShaderPass.js",
            "line": 3,
            "description": "Shader pass is used to apply a post processing effect over an already rendered scene.",
            "author": "alteredq / http://alteredqualia.com/"
        },
        "Audio": {
            "name": "Audio",
            "shortname": "Audio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\..\\source\\core\\resources\\Audio.js",
            "line": 3,
            "description": "Audio class is used to store audio data as a arraybuffer to be later used by objects with the WebAudio API.",
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to Audio file or ArrayBuffer data.",
                    "type": "ArrayBuffer, String"
                },
                {
                    "name": "encoding",
                    "description": "Audio encoding (mp3, wav, etc).",
                    "type": "String"
                }
            ]
        },
        "Font": {
            "name": "Font",
            "shortname": "Font",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\..\\source\\core\\resources\\Font.js",
            "line": 3,
            "description": "Font class stores font data, font data can be stored as an opentype json or as a TTF file (stored in Base64).\n\nFont objects are used for booth 2D and 3D text.",
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to font file",
                    "type": "String"
                }
            ]
        },
        "Image": {
            "name": "Image",
            "shortname": "Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\..\\source\\core\\resources\\Image.js",
            "line": 3,
            "description": "Image class is used to store image data that is used to create Textures.\n\nImages can be stored in mutiple formats.\n\nSome formats (tga, tiff, etc) are converted to png or jpeg in order to work with the rest of the code.",
            "extends": "{Resource}",
            "params": [
                {
                    "name": "data",
                    "description": "Can be URL to image, ArrayBuffer data or base64 encoded data.",
                    "type": "ArrayBuffer, Base64, String"
                },
                {
                    "name": "encoding",
                    "description": "Image encoding, required for ArrayBuffer data.",
                    "type": "String"
                }
            ]
        },
        "Model": {
            "name": "Model",
            "shortname": "Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\..\\source\\core\\resources\\Model.js",
            "line": 3,
            "description": "Model is used to load and check file type for external 3D models, animations, scenes etc.\n\nIt wraps other threejs loaders and loads files using them depending on file format.",
            "extends": "{Resource}"
        },
        "Resource": {
            "name": "Resource",
            "shortname": "Resource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\..\\source\\core\\resources\\Resource.js",
            "line": 3,
            "description": "Resource class is used to represent resources.\n\nResources store data that is used by objects."
        },
        "ResourceManager": {
            "name": "ResourceManager",
            "shortname": "ResourceManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 3,
            "description": "Resource manager is used to manage available resources used by objects\n\nThe resource manager is used to extend the Program object and is not meant to be used as a standalone.",
            "extends": "{Object3D}"
        },
        "TextFile": {
            "name": "TextFile",
            "shortname": "TextFile",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\..\\source\\core\\resources\\TextFile.js",
            "line": 3,
            "description": "Text file resource can be used to store data or code.\n\nText file data can be used to store information to be consumend by the application or runtime code that can be imported by scripts.",
            "extends": "{Resource}"
        },
        "Video": {
            "name": "Video",
            "shortname": "Video",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "..\\..\\source\\core\\resources\\Video.js",
            "line": 3,
            "description": "Video resources are used to store video.\n\nVideo data stored in base64.",
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to video file.",
                    "type": "String"
                },
                {
                    "name": "encoding",
                    "description": "Image encoding, required for ArrayBuffer data.",
                    "type": "String"
                }
            ]
        },
        "CanvasTexture": {
            "name": "CanvasTexture",
            "shortname": "CanvasTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\..\\source\\core\\texture\\CanvasTexture.js",
            "line": 3,
            "description": "Canvas textures can be used to draw content to the texture during runtime, using the context property.\n\nCanvas textures always start with black background and a red text \"Canvas Texture\".",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "width",
                    "description": "Canvas width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Canvas height",
                    "type": "Number"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "CompressedTexture": {
            "name": "CompressedTexture",
            "shortname": "CompressedTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\..\\source\\core\\texture\\CompressedTexture.js",
            "line": 4,
            "description": "CompressTexture class is used to store textures using GPU compatible compressed data.\n\nThe advantage of using these texture is the fact that the texture does not get uncompressed in the GPU memory saving not only project space but also saving video memory during runtime.\n\nThe problem with compressed textures is that its hardware dependent (they dont work everywhere)\n - DXT: supported on desktop and some Android smartphones\n - PVR: supported on iOS and some Android smartphones\n - ETC1: supported by most Android smartphones\n\nThe usage of these format can free a lot of video memory and is a must for mobile devices.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "mipmaps",
                    "description": "Mipmaps levels",
                    "type": "Array"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "CubeTexture": {
            "name": "CubeTexture",
            "shortname": "CubeTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 3,
            "description": "CubeTextures represent 360 view using six images, these images correspond to the faces of a cube.\n\nCubeTextures can be used to simulate reflections and transparency refraction in materials.\n\nIs also possible to create dynamic cubetextures using the CubeCamera object.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "images",
                    "description": "Image array",
                    "type": "Array"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "SpriteSheetTexture": {
            "name": "SpriteSheetTexture",
            "shortname": "SpriteSheetTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 3,
            "description": "SpriteSheet texture, can be used load spritesheet animations as textures.\n\nThe images have to be aligned in a grid without overlapping if the spritesheet is not full the last rows or blocks should be empty.\n\nImages are played row by row, changing every animationSpeed seconds.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Image"
                },
                {
                    "name": "framesHorizontal",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "framesVertical",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "totalFrames",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 3,
            "description": "Image texture constructor, with support for GIF animations.\n\nIt is based on THREE.Texture, original documentation can be found here https://threejs.org/docs/index.html#Reference/Textures/Texture",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Image"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "VideoTexture": {
            "name": "VideoTexture",
            "shortname": "VideoTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 3,
            "description": "Video texture, uses a video DOM element instead of a img element.\n\nVideoTexture also provides methods for playback control.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "video",
                    "description": "",
                    "type": "Video"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "WebcamTexture": {
            "name": "WebcamTexture",
            "shortname": "WebcamTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "line": 3,
            "description": "Webcam texture is used to capture and display video from a webcam in real-time.\n\nIt uses WebRTC, the host must support it, otherwise WebcamTexture will display a black image.",
            "extends": "{Texture}",
            "params": [
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Object3D": {
            "name": "Object3D",
            "shortname": "Object3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 460,
            "description": "This is the base class for most objects in three.js and provides a set of properties and methods for manipulating objects in 3D space.\n\nThis page provides documentation for some of the main features of this class, the original documentation of this class can be found at https://threejs.org/docs/index.html#Reference/Core/Object3D.\n\nAll nunuStudio objects extend the Object3D class of some other higher level class from three.js."
        },
        "Material": {
            "name": "Material",
            "shortname": "Material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "..\\..\\source\\core\\three\\materials\\Material.js",
            "line": 3,
            "description": "Materials describe the appearance of objects. They are defined in a (mostly) renderer-independent way, so you don\"t have to rewrite materials if you decide to use a different renderer.\n\nOriginal documentation available here https://threejs.org/docs/index.html#Reference/Materials/Material"
        },
        "Fog": {
            "name": "Fog",
            "shortname": "Fog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "..\\..\\source\\core\\three\\scenes\\Fog.js",
            "line": 3,
            "description": "Fog class is used to store fog attributes attached to a Scene\n\nOriginal documentation for fog available here https://threejs.org/docs/index.html#Reference/Scenes/Fog and for exponential fog here https://threejs.org/docs/index.html#Reference/Scenes/FogExp2"
        },
        "ArraybufferUtils": {
            "name": "ArraybufferUtils",
            "shortname": "ArraybufferUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\binary\\ArraybufferUtils.js",
            "line": 3,
            "description": "ArraybufferUtils contains methods to convert from and to ArrayBuffer binary format",
            "static": 1
        },
        "Base64Utils": {
            "name": "Base64Utils",
            "shortname": "Base64Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\binary\\Base64Utils.js",
            "line": 3,
            "description": "Base64Utils contains methods to convert from and to Base64 binary format.",
            "static": 1
        },
        "BufferUtils": {
            "name": "BufferUtils",
            "shortname": "BufferUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\binary\\BufferUtils.js",
            "line": 3,
            "description": "BufferUtils contains methods to convert from and to Node.js Buffer binary format",
            "static": 1
        },
        "ByteArrayUtils": {
            "name": "ByteArrayUtils",
            "shortname": "ByteArrayUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\binary\\ByteArrayUtils.js",
            "line": 3,
            "description": "ByteArrayUtils contains methods to convert from and to ByteArray binary format\n\nA byte array is a numeric array that stores a 8 bit (0 to 255) value for each position.",
            "static": 1
        },
        "Tree": {
            "name": "Tree",
            "shortname": "Tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\struct\\Tree.js",
            "line": 3,
            "description": "Tree structure used to represent Trees.\n\nEvery tree stores Trees as children and have a parent children.\n\nIf the parent is null then the Tree is the root."
        },
        "TreeUtils": {
            "name": "TreeUtils",
            "shortname": "TreeUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\struct\\TreeUtils.js",
            "line": 3,
            "description": "TreeUtils used to compare Tree.\n\nCan also be used to compare Object structure.",
            "static": 1
        },
        "AnimationTimer": {
            "name": "AnimationTimer",
            "shortname": "AnimationTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\timer\\AnimationTimer.js",
            "line": 3,
            "description": "Animation timer is a special type of timer that uses the requestAnimationFrame method.\n\nThis timer calls the method with the same rate as the screen refesh rate.\n\nLoop time can be changed dinamically."
        },
        "Timer": {
            "name": "Timer",
            "shortname": "Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryUtils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\timer\\Timer.js",
            "line": 3,
            "description": "Time is user to call functions in loop at a defined rate.\n\nLoop time can be changed dinamically.",
            "params": [
                {
                    "name": "callback",
                    "description": "Timer callback function.",
                    "type": "Function"
                },
                {
                    "name": "time",
                    "description": "Timer period.",
                    "type": "Number"
                }
            ]
        },
        "EventManager": {
            "name": "EventManager",
            "shortname": "EventManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\EventManager.js",
            "line": 3,
            "description": "EventManager is used to manager DOM events creationg and destruction in a single function call.\n\nIt is used by objects to make it easier to add and remove events from global DOM objects."
        },
        "LocalStorage": {
            "name": "LocalStorage",
            "shortname": "LocalStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\LocalStorage.js",
            "line": 3,
            "description": "Utils to access the browser local storage.",
            "static": 1
        },
        "MathUtils": {
            "name": "MathUtils",
            "shortname": "MathUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\MathUtils.js",
            "line": 3,
            "description": "MathUtils contains auxiliar values and function to help with mathematical operations.",
            "static": 1
        },
        "ObjectUtils": {
            "name": "ObjectUtils",
            "shortname": "ObjectUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Utils",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\ObjectUtils.js",
            "line": 3,
            "description": "ObjectUtils is a collection of methods to apply operations to Object3D objects",
            "static": 1
        },
        "PhysicsGenerator": {
            "name": "PhysicsGenerator",
            "shortname": "PhysicsGenerator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 3,
            "description": "Physics generator is used to create Cannon.js shapes from three.js geometries.\n\nCan be used with any object that contains a geometry.\n\nIt is based on the original Mesh2Shape converted by @donmccurdy.",
            "author": "tentone",
            "static": 1
        },
        "VRControls": {
            "name": "VRControls",
            "shortname": "VRControls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "VirtualReality",
            "namespace": "",
            "file": "..\\..\\source\\core\\vr\\VRControls.js",
            "line": 3,
            "description": "VRControl is used to get input from an HDM device and apply it to an Object.",
            "author": "dmarcos (https://github.com/dmarcos)"
        },
        "FileSystem": {
            "name": "FileSystem",
            "shortname": "FileSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Files",
            "namespace": "",
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 3,
            "description": "FileSystem is used to read and write files using nunuStudio.\n\nIts implements muitple solutions for each method depending on the platform (NodeJS, brower or cordova).\n\nSome operations are platform specific and might not work everywhere."
        },
        "Nunu": {
            "name": "Nunu",
            "shortname": "Nunu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Runtime",
            "namespace": "",
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 3,
            "description": "nunuStudio\nMIT license (http://opensource.org/licenses/MIT)\n  \nClass used to store nunuStudio development version and timestamp.\n\nContains methods to check browser feature support."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "..\\..\\source\\core\\animation\\AnimationMixer.js",
            "line": 24,
            "description": "Create actions from array of animations.",
            "itemtype": "method",
            "name": "createActions",
            "params": [
                {
                    "name": "actions",
                    "description": "Array of animations.",
                    "type": "Array"
                }
            ],
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\animation\\AnimationMixer.js",
            "line": 45,
            "description": "Set animation mixer time.",
            "itemtype": "method",
            "name": "setTime",
            "params": [
                {
                    "name": "time",
                    "description": "Time in seconds.",
                    "type": "Number"
                }
            ],
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\animation\\AnimationMixer.js",
            "line": 63,
            "description": "Play animation.",
            "itemtype": "method",
            "name": "play",
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\animation\\AnimationMixer.js",
            "line": 73,
            "description": "Stop animation playback.",
            "itemtype": "method",
            "name": "stop",
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\animation\\AnimationMixer.js",
            "line": 84,
            "description": "Pause animation playback.",
            "itemtype": "method",
            "name": "pause",
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\animation\\AnimationMixer.js",
            "line": 100,
            "description": "Update animation state.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "delta",
                    "description": "Time since last call.",
                    "type": "Number"
                },
                {
                    "name": "forceUpdate",
                    "description": "If set true the mixer is updated even if it isnt playing.",
                    "type": "Boolean"
                }
            ],
            "class": "AnimationMixer",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 40,
            "description": "Set which gamepad should be used by this Gamepad instance.\n\nCan be used to override the gamepad attached to this object and enable multiple gamepad support.",
            "params": [
                {
                    "name": "Browser",
                    "description": "gamepad object.",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setGamepad",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 74,
            "description": "Disconnect this gamepad object.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 89,
            "description": "Get vendor id and product id for the connected gamepad.",
            "itemtype": "method",
            "name": "setProductVendor",
            "params": [
                {
                    "name": "gamepad",
                    "description": "Gamepad object.",
                    "type": "Object"
                }
            ],
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 122,
            "description": "Update the gamepad state.\n\nShould be called every frame before checking the buttons values.",
            "itemtype": "method",
            "name": "update",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 142,
            "description": "Get analog button value between 0 and 1.\n\nIf the button is not analog enabled it will return 0 if button is not pressed or 1 if the button is pressed.",
            "itemtype": "method",
            "name": "getAnalogueButton",
            "params": [
                {
                    "name": "button",
                    "description": "Button to get analogue value from.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Value between 0 and 1 depending how hard the button is pressed.",
                "type": "Number"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 156,
            "description": "Get axis value between -1 and 1 depending on the direction.",
            "itemtype": "method",
            "name": "getAxis",
            "params": [
                {
                    "name": "Axis",
                    "description": "to get value from.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Value between -1 and 1 depending on the axis direction",
                "type": "Number"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 168,
            "description": "Check if a button exists in the connected Gamepad.",
            "itemtype": "method",
            "name": "buttonExists",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button exists in the connected gamepad.",
                "type": "Boolean"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 180,
            "description": "Check if gamepad button is currently pressed.",
            "itemtype": "method",
            "name": "buttonPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button is currently pressed",
                "type": "Boolean"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 192,
            "description": "Check if a gamepad button was just pressed.",
            "itemtype": "method",
            "name": "buttonJustPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button was just pressed",
                "type": "Boolean"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 204,
            "description": "Check if a gamepad button was just released.",
            "itemtype": "method",
            "name": "buttonJustReleased",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button was just released",
                "type": "Boolean"
            },
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 216,
            "description": "Gamepad LEFT button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "LEFT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 223,
            "description": "Gamepad RIGHT button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "RIGHT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 230,
            "description": "Gamepad DOWN button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "DOWN",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 237,
            "description": "Gamepad UP button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "UP",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 244,
            "description": "Gamepad SELECT button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "SELECT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 251,
            "description": "Gamepad START button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "START",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 258,
            "description": "Gamepad HOME button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "HOME",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 265,
            "description": "Gamepad LEFT_TRIGGER_A button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "LEFT_TRIGGER_A",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 272,
            "description": "Gamepad LEFT_TRIGGER_B button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "LEFT_TRIGGER_B",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 279,
            "description": "Gamepad RIGHT_TRIGGER_A button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "RIGHT_TRIGGER_A",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 286,
            "description": "Gamepad RIGHT_TRIGGER_B button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "RIGHT_TRIGGER_B",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 293,
            "description": "Gamepad L1 button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "L1",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 300,
            "description": "Gamepad L2 button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "L2",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 307,
            "description": "Gamepad L3 button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "L3",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 314,
            "description": "Gamepad R1 button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "R1",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 321,
            "description": "Gamepad R2 button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "R2",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 328,
            "description": "Gamepad R3 button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "R3",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 335,
            "description": "Gamepad A button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "A",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 342,
            "description": "Gamepad B button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "B",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 349,
            "description": "Gamepad C button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "C",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 356,
            "description": "Gamepad D button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "D",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 363,
            "description": "Gamepad X button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "X",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 370,
            "description": "Gamepad Y button.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "Y",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 377,
            "description": "Gamepad LEFT_ANALOGUE_BUT axis.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "LEFT_ANALOGUE_BUT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 384,
            "description": "Gamepad LEFT_ANALOGUE_HOR axis.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "LEFT_ANALOGUE_HOR",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 391,
            "description": "Gamepad LEFT_ANALOGUE_VERT axis.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "LEFT_ANALOGUE_VERT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 398,
            "description": "Gamepad RIGHT_ANALOGUE_BUT axis.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "RIGHT_ANALOGUE_BUT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 405,
            "description": "Gamepad RIGHT_ANALOGUE_HOR axis.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "RIGHT_ANALOGUE_HOR",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gamepad.js",
            "line": 412,
            "description": "Gamepad RIGHT_ANALOGUE_VERT axis.",
            "type": "{Number}",
            "itemtype": "attribute",
            "name": "RIGHT_ANALOGUE_VERT",
            "class": "Gamepad",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gyroscope.js",
            "line": 11,
            "description": "Alpha rotation.",
            "itemtype": "property",
            "name": "alpha",
            "type": "{Number}",
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gyroscope.js",
            "line": 18,
            "description": "Beta rotation.",
            "itemtype": "property",
            "name": "beta",
            "type": "{Number}",
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gyroscope.js",
            "line": 25,
            "description": "Gamma rotation.",
            "itemtype": "property",
            "name": "gamma",
            "type": "{Number}",
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gyroscope.js",
            "line": 32,
            "description": "Device orientation.",
            "itemtype": "property",
            "name": "orientation",
            "type": "{Number}",
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gyroscope.js",
            "line": 61,
            "description": "Sets a object rotation to match the device orientation.\n\nThe angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type ZXY",
            "itemtype": "method",
            "name": "setObjectQuaternion",
            "params": [
                {
                    "name": "object",
                    "description": "Object to oriented.",
                    "type": "Object3D"
                }
            ],
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Gyroscope.js",
            "line": 85,
            "description": "Dispose the gyroscope controller.\n\nCleans all events created by this controller.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Gyroscope",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Key.js",
            "line": 11,
            "description": "Indicates if this key is currently pressed.",
            "itemtype": "property",
            "name": "pressed",
            "default": "false",
            "type": "{boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Key.js",
            "line": 19,
            "description": "Indicates if this key was just pressed.",
            "itemtype": "property",
            "name": "justPressed",
            "default": "false",
            "type": "{boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Key.js",
            "line": 27,
            "description": "Indicates if this key was just released.",
            "itemtype": "property",
            "name": "justReleased",
            "default": "false",
            "type": "{boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Key.js",
            "line": 36,
            "description": "Down",
            "itemtype": "attribute",
            "name": "DOWN",
            "type": "{Number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Key.js",
            "line": 43,
            "description": "Up",
            "itemtype": "attribute",
            "name": "UP",
            "type": "{Number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Key.js",
            "line": 50,
            "description": "Reset",
            "itemtype": "attribute",
            "name": "RESET",
            "type": "{Number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Key.js",
            "line": 59,
            "description": "Update Key status based on new key state.",
            "itemtype": "method",
            "name": "update",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Key.js",
            "line": 92,
            "description": "Set this key attributes manually.",
            "itemtype": "method",
            "name": "set",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Key.js",
            "line": 104,
            "description": "Reset key to default values.",
            "itemtype": "method",
            "name": "reset",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 13,
            "description": "Array with keyboard keys status.",
            "type": "{array}",
            "itemtype": "property",
            "name": "keys",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 60,
            "description": "Update key flags synchronously.",
            "itemtype": "method",
            "name": "update",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 85,
            "description": "Reset keyboard status to default.\n\nDoes not clean the action list.",
            "itemtype": "method",
            "name": "reset",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 101,
            "description": "Check if a key is pressed.",
            "itemtype": "method",
            "name": "keyPressed",
            "return": {
                "description": "True is the key is currently pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 112,
            "description": "Check is a key as just pressed.",
            "itemtype": "method",
            "name": "keyJustPressed",
            "return": {
                "description": "True is the key was just pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 123,
            "description": "Check if a key was just released.",
            "itemtype": "method",
            "name": "keyJustReleased",
            "return": {
                "description": "True is the key was just pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 134,
            "description": "Create keyboard events.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 144,
            "description": "Dispose keyboard events.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 154,
            "description": "TAB key",
            "itemtype": "attribute",
            "name": "TAB",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 161,
            "description": "ENTER key",
            "itemtype": "attribute",
            "name": "ENTER",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 168,
            "description": "SHIFT key",
            "itemtype": "attribute",
            "name": "SHIFT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 175,
            "description": "CTRL key",
            "itemtype": "attribute",
            "name": "CTRL",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 182,
            "description": "ALT key",
            "itemtype": "attribute",
            "name": "ALT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 189,
            "description": "CAPS_LOCK key",
            "itemtype": "attribute",
            "name": "CAPS_LOCK",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 196,
            "description": "ESC key",
            "itemtype": "attribute",
            "name": "ESC",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 203,
            "description": "SPACEBAR key",
            "itemtype": "attribute",
            "name": "SPACEBAR",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 210,
            "description": "PAGE_UP key",
            "itemtype": "attribute",
            "name": "PAGE_UP",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 217,
            "description": "PAGE_DOWN key",
            "itemtype": "attribute",
            "name": "PAGE_DOWN",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 224,
            "description": "END key",
            "itemtype": "attribute",
            "name": "END",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 231,
            "description": "HOME key",
            "itemtype": "attribute",
            "name": "HOME",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 238,
            "description": "INSERT key",
            "itemtype": "attribute",
            "name": "INSERT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 245,
            "description": "DEL key",
            "itemtype": "attribute",
            "name": "DEL",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 252,
            "description": "LEFT key",
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 259,
            "description": "RIGHT key",
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 266,
            "description": "UP key",
            "itemtype": "attribute",
            "name": "UP",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 273,
            "description": "DOWN key",
            "itemtype": "attribute",
            "name": "DOWN",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 280,
            "description": "NUM0 key",
            "itemtype": "attribute",
            "name": "NUM0",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 287,
            "description": "NUM1 key",
            "itemtype": "attribute",
            "name": "NUM1",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 294,
            "description": "NUM2 key",
            "itemtype": "attribute",
            "name": "NUM2",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 301,
            "description": "NUM3 key",
            "itemtype": "attribute",
            "name": "NUM3",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 308,
            "description": "NUM4 key",
            "itemtype": "attribute",
            "name": "NUM4",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 315,
            "description": "NUM5 key",
            "itemtype": "attribute",
            "name": "NUM5",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 322,
            "description": "NUM6 key",
            "itemtype": "attribute",
            "name": "NUM6",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 329,
            "description": "NUM7 key",
            "itemtype": "attribute",
            "name": "NUM7",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 336,
            "description": "NUM8 key",
            "itemtype": "attribute",
            "name": "NUM8",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 343,
            "description": "NUM9 key",
            "itemtype": "attribute",
            "name": "NUM9",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 350,
            "description": "A key",
            "itemtype": "attribute",
            "name": "A",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 357,
            "description": "B key",
            "itemtype": "attribute",
            "name": "B",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 364,
            "description": "C key",
            "itemtype": "attribute",
            "name": "C",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 371,
            "description": "D key",
            "itemtype": "attribute",
            "name": "D",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 378,
            "description": "E key",
            "itemtype": "attribute",
            "name": "E",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 385,
            "description": "F key",
            "itemtype": "attribute",
            "name": "F",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 392,
            "description": "G key",
            "itemtype": "attribute",
            "name": "G",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 399,
            "description": "H key",
            "itemtype": "attribute",
            "name": "H",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 406,
            "description": "I key",
            "itemtype": "attribute",
            "name": "I",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 413,
            "description": "J key",
            "itemtype": "attribute",
            "name": "J",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 420,
            "description": "K key",
            "itemtype": "attribute",
            "name": "K",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 427,
            "description": "L key",
            "itemtype": "attribute",
            "name": "L",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 434,
            "description": "M key",
            "itemtype": "attribute",
            "name": "M",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 441,
            "description": "N key",
            "itemtype": "attribute",
            "name": "N",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 448,
            "description": "O key",
            "itemtype": "attribute",
            "name": "O",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 455,
            "description": "P key",
            "itemtype": "attribute",
            "name": "P",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 462,
            "description": "Q key",
            "itemtype": "attribute",
            "name": "Q",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 469,
            "description": "R key",
            "itemtype": "attribute",
            "name": "R",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 476,
            "description": "S key",
            "itemtype": "attribute",
            "name": "S",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 483,
            "description": "T key",
            "itemtype": "attribute",
            "name": "T",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 490,
            "description": "U key",
            "itemtype": "attribute",
            "name": "U",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 497,
            "description": "V key",
            "itemtype": "attribute",
            "name": "V",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 504,
            "description": "W key",
            "itemtype": "attribute",
            "name": "W",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 511,
            "description": "X key",
            "itemtype": "attribute",
            "name": "X",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 518,
            "description": "Y key",
            "itemtype": "attribute",
            "name": "Y",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 525,
            "description": "Z key",
            "itemtype": "attribute",
            "name": "Z",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 533,
            "description": "F1 key",
            "itemtype": "attribute",
            "name": "F1",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 540,
            "description": "F2 key",
            "itemtype": "attribute",
            "name": "F2",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 547,
            "description": "F3 key",
            "itemtype": "attribute",
            "name": "F3",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 554,
            "description": "F4 key",
            "itemtype": "attribute",
            "name": "F4",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 561,
            "description": "F5 key",
            "itemtype": "attribute",
            "name": "F5",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 568,
            "description": "F6 key",
            "itemtype": "attribute",
            "name": "F6",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 575,
            "description": "F7 key",
            "itemtype": "attribute",
            "name": "F7",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 582,
            "description": "F8 key",
            "itemtype": "attribute",
            "name": "F8",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 589,
            "description": "F9 key",
            "itemtype": "attribute",
            "name": "F9",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 596,
            "description": "F10 key",
            "itemtype": "attribute",
            "name": "F10",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 603,
            "description": "F11 key",
            "itemtype": "attribute",
            "name": "F11",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Keyboard.js",
            "line": 610,
            "description": "F12 key",
            "itemtype": "attribute",
            "name": "F12",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 24,
            "description": "Array with mouse buttons status.",
            "type": "{array}",
            "itemtype": "property",
            "name": "keys",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 32,
            "description": "Mouse position inside of the window (coordinates in window space).",
            "type": "{Vector2}",
            "itemtype": "property",
            "name": "position",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 40,
            "description": "Mouse movement (coordinates in window space).",
            "type": "{Vector2}",
            "itemtype": "property",
            "name": "delta",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 48,
            "description": "Mouse scroll wheel movement.",
            "type": "{Number}",
            "itemtype": "property",
            "name": "wheel",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 56,
            "description": "Indicates a button of the mouse was double clicked.",
            "type": "{Array}",
            "itemtype": "property",
            "name": "doubleClicked",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 64,
            "description": "DOM element where to attach the mouse events.",
            "itemtype": "property",
            "name": "domElement",
            "type": "{DOM}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 72,
            "description": "Canvas attached to this mouse instance used to calculate position and delta in element space coordinates.",
            "type": "{DOM}",
            "itemtype": "property",
            "name": "canvas",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 203,
            "description": "LEFT mouse button",
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{Number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 209,
            "description": "MIDDLE mouse button",
            "itemtype": "attribute",
            "name": "MIDDLE",
            "type": "{Number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 215,
            "description": "RIGHT mouse button",
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{Number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 222,
            "description": "Element to be used for coordinates calculation relative to that canvas.",
            "itemtype": "method",
            "name": "setCanvas",
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas to be attached to the Mouse instance",
                    "type": "DOM"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 245,
            "description": "Check if mouse is inside attached canvas (updated async).",
            "itemtype": "method",
            "name": "insideCanvas",
            "return": {
                "description": "True if mouse is currently inside the canvas",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 256,
            "description": "Set mouse lock state.",
            "itemtype": "method",
            "name": "setLock",
            "params": [
                {
                    "name": "value",
                    "description": "If true pointer lock will be requested for the canvas attached to the Mouse instance",
                    "type": "Boolean"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 299,
            "description": "Check if mouse button is currently pressed.",
            "itemtype": "method",
            "name": "buttonPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button is currently pressed",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 311,
            "description": "Check if Mouse button was double clicked.",
            "itemtype": "method",
            "name": "buttonDoubleClicked",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if some mouse button was just double clicked",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 323,
            "description": "Check if a mouse button was just pressed.",
            "itemtype": "method",
            "name": "buttonJustPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button was just pressed",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 335,
            "description": "Check if a mouse button was just released.",
            "itemtype": "method",
            "name": "buttonJustReleased",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if button was just released",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 347,
            "description": "Update mouse position.\n\nAutomatically called by the runtime.",
            "itemtype": "method",
            "name": "updatePosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "xDiff",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yDiff",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 373,
            "description": "Update a mouse button.\n\nAutomatically called by the runtime.",
            "itemtype": "method",
            "name": "updateKey",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "action",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 390,
            "description": "Update mouse buttons state, position, wheel and delta synchronously.",
            "itemtype": "method",
            "name": "update",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 450,
            "description": "Create mouse events.",
            "itemtype": "method",
            "name": "create",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\input\\Mouse.js",
            "line": 460,
            "description": "Dispose mouse events.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\AudioLoader.js",
            "line": 15,
            "description": "Load audio file from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "AudioLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\AudioLoader.js",
            "line": 33,
            "description": "Parse audio json and return resource.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Audio resource",
                "type": "Audio"
            },
            "class": "AudioLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\FontLoader.js",
            "line": 15,
            "description": "Load font file from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "FontLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\FontLoader.js",
            "line": 33,
            "description": "Parse font json and return resource.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Font resource",
                "type": "Font"
            },
            "class": "FontLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\GeometryLoader.js",
            "line": 20,
            "description": "Set list of shapes to be used by this loader.",
            "itemtype": "method",
            "name": "setShapes",
            "params": [
                {
                    "name": "shapes",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "GeometryLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\GeometryLoader.js",
            "line": 33,
            "description": "Load geometry json file from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "GeometryLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\GeometryLoader.js",
            "line": 51,
            "description": "Parse geometry json.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Geometry loaded from json.",
                "type": "Geometry"
            },
            "class": "GeometryLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ImageLoader.js",
            "line": 18,
            "description": "Set cross origin path for the loader.",
            "itemtype": "method",
            "name": "setCrossOrigin",
            "params": [
                {
                    "name": "url",
                    "description": "URL.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Self for chaining.",
                "type": "ImageLoader"
            },
            "class": "ImageLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ImageLoader.js",
            "line": 31,
            "description": "Set base path for texture loading.",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "path",
                    "description": "Path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Self for chaining.",
                "type": "ImageLoader"
            },
            "class": "ImageLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ImageLoader.js",
            "line": 44,
            "description": "Load image resource from url.",
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ImageLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ImageLoader.js",
            "line": 64,
            "description": "Parse image json and return resource.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Image resource",
                "type": "Image"
            },
            "class": "ImageLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\MaterialLoader.js",
            "line": 16,
            "description": "Load material file from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MaterialLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\MaterialLoader.js",
            "line": 36,
            "description": "Set texture array to be used when loading materials",
            "itemtype": "method",
            "name": "setTextures",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "MaterialLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\MaterialLoader.js",
            "line": 47,
            "description": "Parse material JSON.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "material",
                "type": "Material"
            },
            "class": "MaterialLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 20,
            "description": "Load object file from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 46,
            "description": "Parse JSON object.\n\nData can be loaded from a file using the FileSystem methods and parsed to an Object using JSON.parse() method.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "JSON data to be loaded.",
                    "type": "Object"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Program loaded from json data.",
                "type": "Object"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 91,
            "description": "Define base path for external texture loading.",
            "itemtype": "method",
            "name": "setTexturePath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 102,
            "description": "Set cross origin.",
            "itemtype": "method",
            "name": "setCrossOrigin",
            "params": [
                {
                    "name": "origin",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 113,
            "description": "Parse resources on JSON.",
            "itemtype": "method",
            "name": "parseResources",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "resources",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 140,
            "description": "Parse geometries on JSON.",
            "itemtype": "method",
            "name": "parseGeometries",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "geometries",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 164,
            "description": "Parse geometries on JSON.",
            "itemtype": "method",
            "name": "parseGeometries",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "geometries",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 188,
            "description": "Parse materials on json.",
            "itemtype": "method",
            "name": "parseMaterials",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "materials",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 212,
            "description": "Parse animations on json.",
            "itemtype": "method",
            "name": "parseAnimations",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "animations",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 238,
            "description": "Parse images on json.",
            "itemtype": "method",
            "name": "parseImages",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "images",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 261,
            "description": "Parse videos on json.",
            "itemtype": "method",
            "name": "parseVideos",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "videos",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 284,
            "description": "Parse audio on json.",
            "itemtype": "method",
            "name": "parseAudio",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "audio",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 307,
            "description": "Parse fonts on json.",
            "itemtype": "method",
            "name": "parseFonts",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "fonts",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 330,
            "description": "Parse textures on json.",
            "itemtype": "method",
            "name": "parseTextures",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "images",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "videos",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "textures",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 357,
            "description": "Parse skeletons from json.",
            "itemtype": "method",
            "name": "parseSkeletons",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 404,
            "description": "Auxiliar method to bind skeletons to loaded objects.",
            "itemtype": "method",
            "name": "bindSkeletons",
            "params": [
                {
                    "name": "object",
                    "description": "Object3D that contains objects",
                    "type": "Object3D"
                },
                {
                    "name": "skeletons",
                    "description": "Array of skeletons to be binded.",
                    "type": "Array"
                }
            ],
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\ObjectLoader.js",
            "line": 437,
            "description": "Parse objects from json.",
            "itemtype": "method",
            "name": "parseObjects",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "geometries",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "materials",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "textures",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "audio",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fonts",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "objects",
                "type": "Array"
            },
            "class": "ObjectLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\TextureLoader.js",
            "line": 25,
            "description": "Set cross origin path for the loader.",
            "itemtype": "method",
            "name": "setCrossOrigin",
            "params": [
                {
                    "name": "url",
                    "description": "URL.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Self for chaining.",
                "type": "TextureLoader"
            },
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\TextureLoader.js",
            "line": 38,
            "description": "Set base path for texture loading.",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "path",
                    "description": "Path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Self for chaining.",
                "type": "TextureLoader"
            },
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\TextureLoader.js",
            "line": 51,
            "description": "Set list of images to be used by this loader.",
            "itemtype": "method",
            "name": "setImages",
            "params": [
                {
                    "name": "images",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\TextureLoader.js",
            "line": 63,
            "description": "Set list of videos to be used by this loader.",
            "itemtype": "method",
            "name": "setVideos",
            "params": [
                {
                    "name": "videos",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\TextureLoader.js",
            "line": 75,
            "description": "Set list of fonts to be used by this loader.",
            "itemtype": "method",
            "name": "setFonts",
            "params": [
                {
                    "name": "fonts",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\TextureLoader.js",
            "line": 87,
            "description": "Load texture from URL.\n\nDoes the same as creating a new Texture object.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\TextureLoader.js",
            "line": 123,
            "description": "Load texture object from JSON.",
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\TextureLoader.js",
            "line": 143,
            "description": "Parse a texture object JSON description.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TextureLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\VideoLoader.js",
            "line": 15,
            "description": "Load video resource from URL.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "VideoLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\loaders\\VideoLoader.js",
            "line": 35,
            "description": "Parse material JSON.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "material",
                "type": "Material"
            },
            "class": "VideoLoader",
            "module": "Loaders"
        },
        {
            "file": "..\\..\\source\\core\\objects\\animation\\Skeleton.js",
            "line": 21,
            "description": "The array of bones. Note this is a copy of the original array, not a reference, so you can modify the original array without effecting this one.",
            "itemtype": "property",
            "name": "bones",
            "type": "{Array}",
            "class": "Skeleton",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\objects\\animation\\Skeleton.js",
            "line": 29,
            "description": "The array buffer holding the bone data when using a vertex texture.",
            "itemtype": "property",
            "name": "boneMatrices",
            "type": "{ArrayBuffer}",
            "class": "Skeleton",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\objects\\animation\\Skeleton.js",
            "line": 38,
            "description": "An array of Matrix4s that represent the inverse of the matrixWorld of the individual bones.\n\nUse the supplied bone inverses or calculate the inverses.",
            "itemtype": "property",
            "name": "boneInverses",
            "type": "{Array}",
            "class": "Skeleton",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\objects\\animation\\Skeleton.js",
            "line": 69,
            "description": "The DataTexture holding the bone data when using a vertex texture.",
            "itemtype": "property",
            "name": "boneTexture",
            "type": "{DataTexture}",
            "class": "Skeleton",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\objects\\animation\\Skeleton.js",
            "line": 82,
            "description": "Serialize skeleton to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Meta.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Serialized data.",
                "type": "Object"
            },
            "class": "Skeleton",
            "module": "Animation"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 20,
            "description": "AudioListener used by this emmiter.\n\nEvery AudioEmitter has a different WebAudio AudioListener.",
            "itemtype": "property",
            "name": "listener",
            "type": "{AudioListener}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 39,
            "description": "Audio source type, can have the following values:\n - empty\n - buffer\n - audioNode",
            "itemtype": "property",
            "name": "sourceType",
            "type": "{String}",
            "default": "{\"empty\"}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 52,
            "description": "If true the playback starts automatically.",
            "itemtype": "property",
            "name": "autoplay",
            "default": "true",
            "type": "{boolean}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 60,
            "description": "Audio volume.",
            "itemtype": "property",
            "name": "volume",
            "default": "1.0",
            "type": "{Number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 68,
            "description": "Start time in seconds.",
            "itemtype": "property",
            "name": "playbackRate",
            "default": "1.0",
            "type": "{Number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 76,
            "description": "Start time in seconds.",
            "itemtype": "property",
            "name": "startTime",
            "default": "0.0",
            "type": "{Number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 84,
            "description": "If true the audio plays in loop.",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{boolean}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 102,
            "description": "Initialize audio object, loads audio data decodes it and starts playback if autoplay is set to True.",
            "itemtype": "method",
            "name": "initialize",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 125,
            "description": "Set audio buffer to be used by this emitter.",
            "itemtype": "method",
            "name": "setBuffer",
            "params": [
                {
                    "name": "audioBuffer",
                    "description": "Audio buffer to be used.",
                    "type": "AudioBuffer"
                }
            ],
            "return": {
                "description": "Self pointer for chaining.",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 145,
            "description": "Play audio.",
            "itemtype": "method",
            "name": "play",
            "return": {
                "description": "Self pointer for chaining",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 177,
            "description": "Pauses audio playback.",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "Self pointer for chaining",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 192,
            "description": "Stops audio playback and resets time to 0.",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "Self pointer for chaining",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 207,
            "description": "Change audio resource.\n\nIf changed after initialization the audio buffer will be disconnected and reintialized.",
            "itemtype": "method",
            "name": "setAudio",
            "params": [
                {
                    "name": "audio",
                    "description": "Audio resource.",
                    "type": "Audio"
                }
            ],
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 236,
            "description": "Get audio emitter volume.",
            "params": [
                {
                    "name": "volume",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "getVolume",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 247,
            "description": "Set audio emitter volume.",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "Audio volume",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Self pointer for chaining",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 262,
            "description": "Set loop mode. If loop set to True the audio repeats after ending.",
            "itemtype": "method",
            "name": "setLoop",
            "params": [
                {
                    "name": "loop",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Self pointer for chaining",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 281,
            "description": "Get loop mode.",
            "itemtype": "method",
            "name": "getLoop",
            "return": {
                "description": "Loop mode.",
                "type": "Boolean"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 292,
            "description": "Set playback speed.",
            "itemtype": "method",
            "name": "setPlaybackRate",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Self pointer for chaining",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 311,
            "description": "Get the playback speed.",
            "itemtype": "method",
            "name": "getPlaybackRate",
            "return": {
                "description": "Playback speed.",
                "type": "Number"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 322,
            "description": "Get Array with all the filters applied to this audio emitter.",
            "itemtype": "method",
            "name": "getFilters",
            "return": {
                "description": "Filters in this audio emitter.",
                "type": "Array"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 333,
            "description": "Set the entire filters array.",
            "itemtype": "method",
            "name": "setFilters",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Self pointer for chaining",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 361,
            "description": "Get a filter to the filters array.",
            "itemtype": "method",
            "name": "getFilter",
            "params": [
                {
                    "name": "index",
                    "description": "Index of the filter.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Filter."
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 373,
            "description": "Set a filter to the filters array.",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 384,
            "description": "Change the source audio node.",
            "itemtype": "method",
            "name": "setNodeSource",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Self pointer for chaining",
                "type": "AudioEmitter"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 402,
            "description": "Get output audio node.",
            "itemtype": "method",
            "name": "getOutput",
            "return": {
                "description": "Output audio node.",
                "type": "Object"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 413,
            "description": "Dispose audio object, stops the playback and disconnects audio node.",
            "itemtype": "method",
            "name": "dispose",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\AudioEmitter.js",
            "line": 431,
            "description": "Serialize object to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON descrition",
                "type": "Object"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 48,
            "description": "Initialize audio object, loads audio data decodes it and starts playback if autoplay is set to True.",
            "itemtype": "method",
            "name": "initialize",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 68,
            "description": "Update positional audio panner relative to the camera.",
            "itemtype": "method",
            "name": "update",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 98,
            "description": "Get output audio node.",
            "itemtype": "method",
            "name": "getOutput",
            "return": {
                "description": "Output audio node.",
                "type": "Object"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 109,
            "description": "Get reference distance.",
            "itemtype": "method",
            "name": "getRefDistance",
            "return": {
                "description": "Reference distance.",
                "type": "Number"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 120,
            "description": "Set reference distance.",
            "itemtype": "method",
            "name": "setRefDistance",
            "params": [
                {
                    "name": "value",
                    "description": "Reference distance.",
                    "type": "Number"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 131,
            "description": "Get rolloff factor.",
            "itemtype": "method",
            "name": "getRolloffFactor",
            "return": {
                "description": "Rolloff factor.",
                "type": "Number"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 142,
            "description": "Set rolloff factor.",
            "itemtype": "method",
            "name": "setRolloffFactor",
            "params": [
                {
                    "name": "value",
                    "description": "Rolloff factor.",
                    "type": "Number"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 154,
            "description": "Get distance model in use by this audio emitter.",
            "itemtype": "method",
            "name": "getDistanceModel",
            "return": {
                "description": "Distance model.",
                "type": "String"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 165,
            "description": "Set distance model to be used.\n\nDistance model defined how the emitter controls its volume from its position in the world, relative to the camera.\n\nBy default the mode used is \"inverse\", can be also set to:\n - \"linear\": A linear distance model calculating the gain induced by the distance according to\n   - 1 - rolloffFactor * (distance - refDistance) / (maxDistance - refDistance)\n - \"inverse\": An inverse distance model calculating the gain induced by the distance according to:\n   - refDistance / (refDistance + rolloffFactor * (distance - refDistance))\n - \"exponential\": An exponential distance model calculating the gain induced by the distance according to:\n   - pow(distance / refDistance, -rolloffFactor).",
            "itemtype": "method",
            "name": "setDistanceModel",
            "params": [
                {
                    "name": "model",
                    "description": "Distance Model to be used.",
                    "type": "String"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 186,
            "description": "Get maximum distance for this audio emitter.",
            "itemtype": "method",
            "name": "getMaxDistance",
            "return": {
                "description": "Maximum distance."
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 197,
            "description": "Set maximum distance for this audio emitter.",
            "itemtype": "method",
            "name": "setMaxDistance",
            "params": [
                {
                    "name": "value",
                    "description": "Maximum distance.",
                    "type": "Number"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\audio\\PositionalAudio.js",
            "line": 208,
            "description": "Serialize object to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON descrition",
                "type": "Object"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 18,
            "description": "Camera size relative to resize mode.",
            "itemtype": "property",
            "name": "size",
            "default": "10.0",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 25,
            "description": "Aspect ratio X/Y.",
            "itemtype": "property",
            "name": "aspect",
            "default": "1.0",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 32,
            "description": "Camera resize mode.",
            "itemtype": "property",
            "name": "mode",
            "default": "RESIZE_HORIZONTAL",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 39,
            "description": "Camera viewport offset.\n\nValues range from 0.0 to 1.0 in screen space.",
            "itemtype": "property",
            "name": "offset",
            "type": "{Vector2}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 47,
            "description": "Camera viewport size.\n\nValues range from 0.0 to 1.0 in screen space.",
            "itemtype": "property",
            "name": "viewport",
            "type": "{Vector2}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 55,
            "description": "Clear screen color flag.",
            "itemtype": "property",
            "name": "clearColor",
            "default": "false",
            "type": "{boolean}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 62,
            "description": "Clear depth flag.",
            "itemtype": "property",
            "name": "clearDepth",
            "default": "false",
            "type": "{boolean}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 69,
            "description": "Camera draw order preference.\n\nIf more than one camera has the same order value the draw order is undefined for those cameras.",
            "itemtype": "property",
            "name": "order",
            "default": "0",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 106,
            "description": "Used to set camera to resize horizontally",
            "itemtype": "attribute",
            "name": "RESIZE_HORIZONTAL",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 113,
            "description": "Used to set camera to resize vertically.",
            "itemtype": "attribute",
            "name": "RESIZE_VERTICAL",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 121,
            "description": "Render a scene using this camera and the internal EffectComposer.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "WebGL renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "scene",
                    "description": "Scene to be rendered.",
                    "type": "Scene"
                }
            ],
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 133,
            "description": "Resize this camera, should be called every time after resizing the screen.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "x",
                    "description": "Width.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Height.",
                    "type": "Number"
                }
            ],
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 150,
            "description": "Destroy camera object and remove it from the scene.",
            "itemtype": "method",
            "name": "destroy",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 166,
            "description": "Update camera projection matrix.\n\nShould be called after chaging projection parameters.",
            "itemtype": "method",
            "name": "updateProjectionMatrix",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\OrthographicCamera.js",
            "line": 194,
            "description": "Serialize object to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON descrition",
                "type": "Object"
            },
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 17,
            "description": "Camera field of view in degrees.",
            "itemtype": "property",
            "name": "fov",
            "default": "50",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 24,
            "description": "Camera aspect ratio X/Y.",
            "itemtype": "property",
            "name": "aspect",
            "default": "1.0",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 31,
            "description": "Camera zoom.",
            "itemtype": "property",
            "name": "zoom",
            "default": "1.0",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 38,
            "description": "Camera viewport offset.\n\nValues range from 0.0 to 1.0 in screen space.",
            "itemtype": "property",
            "name": "offset",
            "type": "{Vector2}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 46,
            "description": "Camera viewport size.\n\nValues range from 0.0 to 1.0 in screen space.",
            "itemtype": "property",
            "name": "viewport",
            "type": "{Vector2}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 54,
            "description": "Clear screen color flag.",
            "itemtype": "property",
            "name": "clearColor",
            "default": "false",
            "type": "{boolean}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 61,
            "description": "Clear depth flag.",
            "itemtype": "property",
            "name": "clearDepth",
            "default": "false",
            "type": "{boolean}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 68,
            "description": "Camera draw order preference.\n\nIf more than one camera has the same order value the draw order is undefined for those cameras.",
            "itemtype": "property",
            "name": "order",
            "default": "0",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 101,
            "description": "Render a scene using this camera and the internal EffectComposer.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "WebGL renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "scene",
                    "description": "Scene to be rendered.",
                    "type": "Scene"
                }
            ],
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 113,
            "description": "Resize this camera, should be called every time after resizing the screen.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "x",
                    "description": "Width.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Height.",
                    "type": "Number"
                }
            ],
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 130,
            "description": "Destroy camera object and remove it from the scene.",
            "itemtype": "method",
            "name": "destroy",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 146,
            "description": "Update camera projection matrix.\n\nShould be called after chaging projection parameters.",
            "itemtype": "method",
            "name": "updateProjectionMatrix",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\cameras\\PerspectiveCamera.js",
            "line": 168,
            "description": "Serialize object to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON descrition",
                "type": "Object"
            },
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 21,
            "description": "Mouse sensitivity.",
            "itemtype": "property",
            "name": "sensitivity",
            "type": "{Number}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 29,
            "description": "Flag to indicate if the button left button needs to be pressed to rotate the object.",
            "itemtype": "property",
            "name": "needsButtonPressed",
            "default": "true",
            "type": "{Boolean}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 38,
            "description": "Indicates if its possible to move the object using the Keyboard keys.",
            "itemtype": "property",
            "name": "movementEnabled",
            "default": "true",
            "type": "{Boolean}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 47,
            "description": "Movement speed, relative to the world.",
            "itemtype": "property",
            "name": "moveSpeed",
            "default": "moveSpeed",
            "type": "{Number}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 56,
            "description": "If set to true the object will only move on X and Z axis.",
            "itemtype": "property",
            "name": "moveOnPlane",
            "default": "false",
            "type": "{Boolean}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 65,
            "description": "Array with keys to be used to move the object.\n - Forward\n - Backward\n - Left\n - Right",
            "itemtype": "property",
            "name": "moveKeys",
            "type": "{Array}",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 169,
            "description": "Update controls position and rotation.\n\nShould be called if some of its properties are changed manually.",
            "itemtype": "method",
            "name": "updateControls",
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\FirstPersonControls.js",
            "line": 187,
            "description": "Used to get camera direction for this controller.\n\nController direction can be used to simplify controlling physics objects, create objects in the camera direction, etc.",
            "itemtype": "method",
            "name": "getDirection",
            "return": {
                "description": "Normalized camera direction.",
                "type": "Vector3"
            },
            "class": "FirstPersonControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 19,
            "description": "Initial distance of the object relative to the center.",
            "itemtype": "property",
            "name": "distance",
            "default": "3",
            "type": "{Number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 30,
            "description": "Mouse sensitivity.",
            "itemtype": "property",
            "name": "sensitivity",
            "type": "{Number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 38,
            "description": "Mouse scroll sensitivity.",
            "itemtype": "property",
            "name": "zoomSensitivity",
            "type": "{Number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 46,
            "description": "Top limit angle.",
            "itemtype": "property",
            "name": "limitUp",
            "default": "1.57",
            "type": "{Number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 55,
            "description": "Bottom limit angle.",
            "itemtype": "property",
            "name": "limitDown",
            "default": "-1.57",
            "type": "{Number}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 64,
            "description": "Indicates if the button left button needs to be pressed to rotate the object.",
            "itemtype": "property",
            "name": "needsButtonPressed",
            "default": "true",
            "type": "{Boolean}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 73,
            "description": "Indicates if its possible to zoom in and out to the center point.",
            "itemtype": "property",
            "name": "zoomEnabled",
            "default": "true",
            "type": "{Boolean}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 82,
            "description": "Indicates if its possible to move the object around.",
            "itemtype": "property",
            "name": "movementEnabled",
            "default": "true",
            "type": "{Boolean}",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\controls\\OrbitControls.js",
            "line": 177,
            "description": "Update controls position and rotation.\n\nShould be called if some of its properties are changed manually.",
            "itemtype": "method",
            "name": "updateControls",
            "class": "OrbitControls",
            "module": "Controls"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 23,
            "description": "Websocket object used to connect to the data server.",
            "itemtype": "property",
            "name": "socket",
            "default": "127.0.0.1:8181",
            "type": "{Object}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 32,
            "description": "Connected flag.",
            "itemtype": "property",
            "name": "connected",
            "type": "{boolean}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 40,
            "description": "Debug model flag.",
            "itemtype": "property",
            "name": "debugModel",
            "default": "true",
            "type": "{boolean}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 49,
            "description": "Time until data is considered too obsolete to be usable.",
            "itemtype": "property",
            "name": "dataTimeout",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 57,
            "description": "Image data sent by the kinnect camera.",
            "itemtype": "property",
            "name": "camera",
            "type": "{Blob}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 65,
            "description": "Skeleton data sent by the kinnect.",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 108,
            "description": "Kinect default data timeout in seconds.",
            "itemtype": "attribute",
            "name": "DATA_TIMEOUT",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 117,
            "description": "Kinect camera depth mode.",
            "itemtype": "attribute",
            "name": "DEPTH",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 125,
            "description": "Kinect camera color mode.",
            "itemtype": "attribute",
            "name": "COLOR",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 133,
            "description": "Kinect skeleton joint names in pairs.",
            "itemtype": "attribute",
            "name": "JOINTS_NAME",
            "type": "{Array}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 146,
            "description": "Update kinect device state.",
            "itemtype": "method",
            "name": "update",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 206,
            "description": "Check if there is kinect connected.",
            "itemtype": "method",
            "name": "isConnected",
            "return": {
                "description": "True if there is a kinect connected",
                "type": "Boolean"
            },
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 217,
            "description": "Set kinect camera mode.",
            "itemtype": "method",
            "name": "setCameraMode",
            "params": [
                {
                    "name": "mode",
                    "description": "Camera mode",
                    "type": "Boolean"
                }
            ],
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\KinectDevice.js",
            "line": 235,
            "description": "Create JSON for object.",
            "itemtype": "method",
            "name": "toJSON",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 19,
            "description": "Debug model flag.",
            "itemtype": "property",
            "name": "debugModel",
            "default": "true",
            "type": "{boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 28,
            "description": "Flag to enable gesture detection.",
            "itemtype": "property",
            "name": "gesturesEnabled",
            "default": "true",
            "type": "{boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 37,
            "description": "Flag to enable hand pose detection.",
            "itemtype": "property",
            "name": "posesEnabled",
            "default": "true",
            "type": "{boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 46,
            "description": "Hand tracking mode.",
            "itemtype": "property",
            "name": "mode",
            "default": "DESK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 55,
            "description": "Flag to set arm tracking.",
            "itemtype": "property",
            "name": "useArm",
            "default": "false",
            "type": "{boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 92,
            "description": "Leap tracking desktop mode",
            "itemtype": "attribute",
            "name": "DESK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 99,
            "description": "Leap tracking HDM mode",
            "itemtype": "attribute",
            "name": "DESK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 106,
            "description": "Leap SWIPE gesture",
            "itemtype": "attribute",
            "name": "SWIPE",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 112,
            "description": "Leap SWIPE_LEFT gesture",
            "itemtype": "attribute",
            "name": "SWIPE_LEFT",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 118,
            "description": "Leap SWIPE_RIGHT gesture",
            "itemtype": "attribute",
            "name": "SWIPE_RIGHT",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 124,
            "description": "Leap SWIPE_FRONT gesture",
            "itemtype": "attribute",
            "name": "SWIPE_FRONT",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 130,
            "description": "Leap SWIPE_BACK gesture",
            "itemtype": "attribute",
            "name": "SWIPE_BACK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 136,
            "description": "Leap SWIPE_UP gesture",
            "itemtype": "attribute",
            "name": "SWIPE_UP",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 142,
            "description": "Leap SWIPE_DOWN gesture",
            "itemtype": "attribute",
            "name": "SWIPE_DOWN",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 148,
            "description": "Leap CIRCLE gesture",
            "itemtype": "attribute",
            "name": "CIRCLE",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 154,
            "description": "Leap SCREEN_TAP gesture",
            "itemtype": "attribute",
            "name": "SCREEN_TAP",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 160,
            "description": "Leap KEY_TAP gesture",
            "itemtype": "attribute",
            "name": "KEY_TAP",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 167,
            "description": "Hand CLOSED pose",
            "itemtype": "attribute",
            "name": "CLOSED",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 173,
            "description": "Hand OPEN pose",
            "itemtype": "attribute",
            "name": "OPEN",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 179,
            "description": "Hand POINTING pose",
            "itemtype": "attribute",
            "name": "POINTING",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 186,
            "description": "Initialize LeapMotion object.\n\nCalled automatically by the runtime.\n\nConnects to the websocket provided by the leap driver.",
            "itemtype": "method",
            "name": "initialize",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 210,
            "description": "Update leap status.\n\nCalled automatically by the runtime.",
            "itemtype": "method",
            "name": "update",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 238,
            "description": "Check if a gesture is occuring, is true while the gesture is occuring.",
            "itemtype": "method",
            "name": "checkGesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "Gesture to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if the gesture is occuring",
                "type": "Boolean"
            },
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 254,
            "description": "Check if hand is in pose.",
            "itemtype": "method",
            "name": "checkPose",
            "params": [
                {
                    "name": "pose",
                    "description": "Pose to be checked",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True is hand is in this pose",
                "type": "Boolean"
            },
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 270,
            "description": "Set hand tracking mode.\n\nCan be set to HDM or Desktop mode.",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "mode",
                    "description": "Mode",
                    "type": "Number"
                }
            ],
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 283,
            "description": "Update leap object pose flags from collected data.\n\nCalled automatically by the update methos.",
            "itemtype": "method",
            "name": "updatePoses",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 359,
            "description": "Update leap object gesture flags from collected data.\n\nCalled automatically by the update method.",
            "itemtype": "method",
            "name": "updateGestures",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 432,
            "description": "Update internal hand debug model.\n\nAutomatically called by the update method if debugModel is set to true.",
            "itemtype": "method",
            "name": "updateDebugModel",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 512,
            "description": "Get hand speed (temporaly normalized).",
            "itemtype": "method",
            "name": "getMovement",
            "return": {
                "description": "Hand speed",
                "type": "Number"
            },
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\device\\LeapMotion.js",
            "line": 529,
            "description": "Create JSON for object.",
            "itemtype": "method",
            "name": "toJSON",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "..\\..\\source\\core\\objects\\lights\\DirectionalLight.js",
            "line": 33,
            "description": "Update light shadow map atributtes at runtime",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "DirectionalLight",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\lights\\PointLight.js",
            "line": 34,
            "description": "Update light shadow map atributtes at runtime",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "PointLight",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\lights\\RectAreaLight.js",
            "line": 28,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON descrition",
                "type": "Object"
            },
            "class": "RectAreaLight",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\lights\\SpotLight.js",
            "line": 39,
            "description": "SpotLight looks to the target object coordinates.\n\nThe target object should always be at the scene root.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "target",
                    "description": "Target object.",
                    "type": "Object3D"
                }
            ],
            "class": "SpotLight",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\lights\\SpotLight.js",
            "line": 52,
            "description": "Update light shadow map atributtes at runtime.",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "SpotLight",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\lights\\SpotLight.js",
            "line": 64,
            "description": "Serialize SpotLight data to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Meta.",
                    "type": "Object"
                }
            ],
            "class": "SpotLight",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Mesh.js",
            "line": 14,
            "description": "Geometry defines the object structure.",
            "itemtype": "property",
            "name": "geometry",
            "type": "{Geometry}",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Mesh.js",
            "line": 20,
            "description": "Material is used to define how the geometry surface is shaded.",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Mesh.js",
            "line": 26,
            "description": "Determines how the mesh triangles are constructed from the vertices.\n\nOnly works when the geometry is a BufferGeometry.",
            "itemtype": "property",
            "name": "drawMode",
            "default": "TrianglesDrawMode",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Mesh.js",
            "line": 49,
            "description": "Dispose mesh along with its material and geometry.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 16,
            "description": "Geometry defined the object structure.",
            "itemtype": "property",
            "name": "geometry",
            "type": "{Geometry}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 22,
            "description": "Material is used to define how the geometry surface is shaded.",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 28,
            "description": "Determines how the mesh triangles are constructed from the vertices.\n\nOnly works when the geometry is a BufferGeometry.",
            "itemtype": "property",
            "name": "drawMode",
            "default": "TrianglesDrawMode",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 36,
            "description": "Array with the bones attached to this mesh.",
            "itemtype": "property",
            "name": "bones",
            "type": "{Array}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 56,
            "description": "Dispose mesh along with its material and geometry.",
            "itemtype": "method",
            "name": "dispose",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 77,
            "description": "Bind a skeleton to this SkinnedMesh. The bindMatrix gets saved to .bindMatrix property and the .bindMatrixInverse gets calculated.\n\nThis is called automatically in the constructor, and the skeleton is created from the bones of the Geometry passed in the constructor.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "skeleton",
                    "description": "",
                    "type": "Skeleton"
                },
                {
                    "name": "bindMatrix",
                    "description": "",
                    "type": "Matrix4"
                }
            ],
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\SkinnedMesh.js",
            "line": 87,
            "description": "Serialize skinned mesh to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata",
                    "type": "Object"
                }
            ],
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 27,
            "description": "Font used to draw text.",
            "itemtype": "property",
            "name": "font",
            "type": "{Font}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 34,
            "description": "Size of the text (depth).",
            "itemtype": "property",
            "name": "size",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 41,
            "description": "Height of the text.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 48,
            "description": "Number of segments that compose a curve in the font.",
            "itemtype": "property",
            "name": "curveSegments",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 55,
            "description": "If true a bevel is added to the text.",
            "itemtype": "property",
            "name": "bevel",
            "type": "{boolean}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 62,
            "description": "Bevel thickness.",
            "itemtype": "property",
            "name": "bevelThickness",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 69,
            "description": "Bevel size.",
            "itemtype": "property",
            "name": "bevelSize",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 76,
            "description": "Text.",
            "itemtype": "property",
            "name": "text",
            "type": "{String}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 86,
            "description": "Set font used by this text 3D instance.",
            "params": [
                {
                    "name": "font",
                    "description": "Font",
                    "type": "Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 101,
            "description": "Change text.",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setText",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 116,
            "description": "Update text geometry.\n\nShould be called after chaging any attribute.",
            "itemtype": "method",
            "name": "updateGeometry",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 146,
            "description": "Clone this Text3D instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Clone of this object",
                "type": "Text3D"
            },
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\mesh\\Text3D.js",
            "line": 157,
            "description": "Create JSON for object.\n\nNeed to backup geometry and set to undefined to avoid it being stored.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 20,
            "description": "CubeCamera near plane.",
            "itemtype": "property",
            "name": "near",
            "type": "{Number}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 27,
            "description": "CubeCamera far plane.",
            "itemtype": "property",
            "name": "far",
            "type": "{Number}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 34,
            "description": "Resolution of each face. Should be a power of 2 (32, 64, 128, ...).",
            "itemtype": "property",
            "name": "resolution",
            "type": "{Number}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 41,
            "description": "Auto update indicates if the cube camera is updated automatically each frame.",
            "itemtype": "property",
            "name": "autoUpdate",
            "type": "{Boolean}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 49,
            "description": "Array of 6 cameras used to render each face of the cube.",
            "itemtype": "property",
            "name": "cameras",
            "type": "{Array}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 75,
            "description": "WebGL cube render target to where the scene is rendered.",
            "itemtype": "property",
            "name": "target",
            "type": "{WebGLRenderTargetCube}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 87,
            "description": "CubeTexture generated by this CubeCamera.\n\nCan be attached to materials as envMap.",
            "itemtype": "property",
            "name": "cube",
            "type": "{CubeTexture}",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 108,
            "description": "Initialize CubeCamera object.\n\nGets the attached scene and the renderer in use.",
            "itemtype": "method",
            "name": "initialize",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 135,
            "description": "Update CubeCamera object.\n\nIf autoUpdate is set to true the CubeCamera updates the CubeTexture automatically.",
            "itemtype": "method",
            "name": "update",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 153,
            "description": "Set the CubeCamera resolution.",
            "itemtype": "method",
            "name": "setResolution",
            "params": [
                {
                    "name": "resolution",
                    "description": "CubeCamera resolution (per face). Should be a 2 pot.",
                    "type": "Number"
                }
            ],
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 165,
            "description": "Render new cube faces. \n\nShould be called every time a change in the scene is made.",
            "itemtype": "method",
            "name": "updateCubeMap",
            "params": [
                {
                    "name": "renderer",
                    "description": "Renderer to be used.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "scene",
                    "description": "Scene to be renderer.",
                    "type": "Scene"
                }
            ],
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 189,
            "description": "Disposes the CubeCamera.",
            "itemtype": "method",
            "name": "dispose",
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\CubeCamera.js",
            "line": 199,
            "description": "Serialize object to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Meta data.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON description.",
                "type": "Object"
            },
            "class": "CubeCamera",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\LensFlare.js",
            "line": 232,
            "description": "Add texture to the lensFlare object.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "texture",
                    "description": "Texture to be used forthe new layer.",
                    "type": "Texture"
                },
                {
                    "name": "size",
                    "description": "Size in pixels (-1 = use texture.width)",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "Distance (0-1) from light source (0=at light source)",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "Texture color",
                    "type": "Color"
                }
            ],
            "class": "LensFlare",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\LensFlare.js",
            "line": 266,
            "description": "Serialize lensflare data to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Serialized data.",
                "type": "Object"
            },
            "class": "LensFlare",
            "module": "Misc"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 26,
            "description": "Array with top sky colors.",
            "itemtype": "property",
            "name": "colorTop",
            "type": "{Array}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 34,
            "description": "Array with bottom sky colors.",
            "itemtype": "property",
            "name": "colorBottom",
            "type": "{Array}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 42,
            "description": "Sun color in hex RGB.",
            "itemtype": "property",
            "name": "sunColor",
            "type": "{Number}",
            "default": "0xFFFFAA",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 51,
            "description": "Sun color intensity.",
            "itemtype": "property",
            "name": "intensity",
            "type": "{Number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 59,
            "description": "Moon color in hex RGB.",
            "itemtype": "property",
            "name": "moonColor",
            "type": "{Number}",
            "default": "0x5555BB",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 68,
            "description": "Hemisphere light used to match ambient ligth with sky color.",
            "itemtype": "property",
            "name": "hemisphere",
            "type": "{HemisphereLight}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 79,
            "description": "Directional light to simulate sun light and cast shadows.",
            "itemtype": "property",
            "name": "sun",
            "type": "{DirectionalLight}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 126,
            "description": "Sky mesh with material shader to calculate dinamically sky color.",
            "itemtype": "property",
            "name": "sky",
            "type": "{Mesh}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 143,
            "description": "If set to true the sky auto updates its time.",
            "itemtype": "property",
            "name": "autoUpdate",
            "default": "true",
            "type": "{boolean}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 152,
            "description": "Sun distance.",
            "itemtype": "property",
            "name": "sunDistance",
            "type": "{Number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 160,
            "description": "Day time in seconds.",
            "itemtype": "property",
            "name": "dayTime",
            "type": "{Number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 168,
            "description": "Current day time in seconds.",
            "itemtype": "property",
            "name": "time",
            "type": "{Number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 181,
            "description": "Initialize sky object.\n\nCalled automatically by the runtime.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 195,
            "description": "Update sky state.\n\nCalled automatically by the runtime.",
            "itemtype": "method",
            "name": "update",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 221,
            "description": "Update sky color and sun position.\n\nIf autoUpdate set to true is automatically called by the update method.",
            "itemtype": "method",
            "name": "updateSky",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\misc\\Sky.js",
            "line": 360,
            "description": "Create JSON for object.",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 16,
            "description": "SPE Group instance.\n\nhttps://squarefeet.github.io/ShaderParticleEngine/docs/api/SPE.Group.html",
            "itemtype": "property",
            "name": "group",
            "type": "{SPE.Group}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 26,
            "description": "SPE Emitter instance.\n\nEmitter has attributes that can be used to controll the particle system\n\nhttps://squarefeet.github.io/ShaderParticleEngine/docs/api/SPE.Emitter.html",
            "itemtype": "property",
            "name": "emitter",
            "type": "{SPE.Emitter}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 45,
            "description": "A dynamic particle emmiter ignores the position in its transform and applies it directly to the emitter origin.",
            "itemtype": "property",
            "name": "dinamicEmitter",
            "type": "{Boolean}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 55,
            "description": "Texture attached to the group of this particle emitter.",
            "itemtype": "property",
            "name": "texture",
            "type": "{Texture}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 74,
            "description": "Default particle emitter configuration.",
            "itemtype": "attribute",
            "name": "defaultEmitter",
            "type": "{Object}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 95,
            "description": "Default particle emitter group configuration.",
            "itemtype": "attribute",
            "name": "defaultGroup",
            "type": "{Object}",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 116,
            "description": "Reload internal material and geometry of this particle emitter.\n\nRecretes the group and emitter object attached to the particle.\n\nMay be required after changing material related parameters.",
            "itemtype": "method",
            "name": "reload",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 140,
            "description": "Update particle object matrix.\n\nIgnores the particle position if the moveEmitter attribute is set true.",
            "itemtype": "method",
            "name": "updateMatrix",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 162,
            "description": "Particle emitter state is automatically updated before rendering.",
            "itemtype": "method",
            "name": "onBeforeRender",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 178,
            "description": "Dispose particle emitter.\n\nShould be called when destroying particle emitter.",
            "itemtype": "method",
            "name": "dispose",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\particle\\ParticleEmitter.js",
            "line": 192,
            "description": "Serialize object to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "..\\..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 23,
            "description": "Physics body contains the following attributes.\n - position Vec3\n - velocity Vec3\n - torque Vec3\n - angularVelocity Vec3\n - quaternion Quaternion\n - mass Number\n - material Material\n - type Number\n - linearDamping Number\n - angularDamping Number\n - allowSleep Boolean\n - sleepSpeedLimit Number\n - sleepTimeLimit Number\n - collisionFilterGroup Number\n - collisionFilterMask Number\n - fixedRotation Boolean\n - shape Array",
            "itemtype": "attribute",
            "name": "body",
            "type": "{CANNON.Body}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 50,
            "description": "Physics world.",
            "itemtype": "attribute",
            "name": "world",
            "type": "{CANNON.World}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 61,
            "description": "Intialize physics object and add it to the scene physics world.\n\nAutomatically called by the runtime.",
            "itemtype": "method",
            "name": "initialize",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 95,
            "description": "Update object position and rotation based on cannon.js body.\n\nAutomatically called by the runtime.",
            "itemtype": "method",
            "name": "update",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 114,
            "description": "Add shape to physics object body.",
            "params": [
                {
                    "name": "shape",
                    "description": "",
                    "type": "CANNON.Shape"
                }
            ],
            "itemtype": "method",
            "name": "addShape",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\objects\\physics\\PhysicsObject.js",
            "line": 128,
            "description": "Create JSON for object.\nNeed to backup material and geometry and set to undefined to avoid it being stored.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 44,
            "description": "Javascript code attached to the script.",
            "itemtype": "property",
            "name": "code",
            "type": "{String}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 52,
            "description": "Mode indicates how to include external javascripts files into the script.\n\nCan be Script.APPEND, Script.EVALUATE or Script.INCLUDE.",
            "itemtype": "property",
            "name": "mode",
            "type": "{Number}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 62,
            "description": "Compiled function used during runtime.",
            "itemtype": "attribute",
            "name": "script",
            "type": "{Function}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 70,
            "description": "Pointer to the parent program.\n\nUsed access program resources easier.",
            "itemtype": "property",
            "name": "program",
            "type": "{Program}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 80,
            "description": "Pointer to the parent scene.",
            "itemtype": "property",
            "name": "scene",
            "type": "{Scene}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 91,
            "description": "Default script code used when creating a new Script.",
            "itemtype": "attribute",
            "name": "DEFAULT",
            "type": "{String}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 98,
            "description": "List of methods that a script can implement.",
            "itemtype": "attribute",
            "name": "METHODS",
            "type": "{Array}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 105,
            "description": "Append libraries on initialization.\n\nLibraries are appended to the script code on initialization.",
            "itemtype": "attribute",
            "name": "APPEND",
            "type": "{Number}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 115,
            "description": "Evaluate libs during runtime.\n\nThis allows to load new libs during runtime, but its not possible to access private statements.",
            "itemtype": "attribute",
            "name": "EVALUATE",
            "type": "{Number}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 125,
            "description": "Include file into the document.body.\n\nThis imports the JS file as any other file included into a <script> tag.",
            "itemtype": "attribute",
            "name": "INCLUDE",
            "type": "{Number}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 135,
            "description": "Auxiliar function to include javascript source file from resource into the script.\n\nThe imported source is evaluated and loaded in the context of the script.\n\nGlobal declarations need to be cleaned using the dipose method.",
            "itemtype": "method",
            "name": "include",
            "params": [
                {
                    "name": "name",
                    "description": "Javascript resource name.",
                    "type": "String"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 146,
            "description": "Get includes from the code.\n\nUsed to extract includes from code when loading libraries in APPEND mode.",
            "static": 1,
            "itemtype": "method",
            "name": "getIncludes",
            "params": [
                {
                    "name": "code",
                    "description": "Script code.",
                    "type": "String"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 172,
            "description": "Remove includes from code.\n\nUsed to remove include statements when initializing code in APPEND mode.",
            "static": 1,
            "itemtype": "method",
            "name": "removeIncludes",
            "params": [
                {
                    "name": "code",
                    "description": "Script code.",
                    "type": "String"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 186,
            "description": "Initialize script\nAutomatically called by the runtime\nCalls the script initialize method if it exists",
            "itemtype": "method",
            "name": "initialize",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 224,
            "description": "Update script state.\n\nCalls the script update method if it exists.",
            "itemtype": "method",
            "name": "update",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 250,
            "description": "Disposes the script, can be used to clear resources when the program exits.\n\nCalls the script dispose method if it exists.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 267,
            "description": "Call resize method if available.\n\nThe resize method receives width and height as arguments.",
            "itemtype": "method",
            "name": "resize",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 287,
            "description": "Call onAppData if available.\n\nCalled automatically every time external data is passed to the runtime.",
            "itemtype": "method",
            "name": "appData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 303,
            "description": "Set script code.\n\nCan be used to dinamically change the script code. However it is not recommended can lead to undefined behavior.",
            "itemtype": "method",
            "name": "compileCode",
            "params": [
                {
                    "name": "code",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "onReady",
                    "description": "Funtion called when the code is ready.",
                    "type": "Function"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\script\\Script.js",
            "line": 420,
            "description": "Create JSON for script.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 85,
            "description": "Spine animation data.",
            "itemtype": "property",
            "name": "json",
            "type": "{Object}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 93,
            "description": "Texture atlas information.",
            "itemtype": "property",
            "name": "atlas",
            "type": "{Object}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 101,
            "description": "Array of SpineTextures used by the animation.",
            "itemtype": "property",
            "name": "textures",
            "type": "{Array}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 125,
            "description": "Update mesh geometry from animation state before rendering.",
            "itemtype": "method",
            "name": "onBeforeRender",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 138,
            "description": "Play animation.",
            "itemtype": "method",
            "name": "play",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 157,
            "description": "Get all available animations.",
            "itemtype": "method",
            "name": "getAnimations",
            "return": {
                "description": "Animations",
                "type": "Array"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 168,
            "description": "Set animation from track number and name.",
            "itemtype": "method",
            "name": "setAnimation",
            "params": [
                {
                    "name": "track",
                    "description": "Track number.",
                    "type": "Number"
                },
                {
                    "name": "animation",
                    "description": "Animation name.",
                    "type": "String"
                },
                {
                    "name": "loop",
                    "description": "If true the animation plays in loop.",
                    "type": "Boolean"
                }
            ],
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 194,
            "description": "Get skins available for this animation.",
            "itemtype": "method",
            "name": "getSkins",
            "return": {
                "description": "List of skins available for this animation.",
                "type": "Array"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 205,
            "description": "Set skin to be used by this animation",
            "itemtype": "method",
            "name": "setSkin",
            "params": [
                {
                    "name": "name",
                    "description": "Skin name.",
                    "type": "String"
                }
            ],
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\..\\source\\core\\objects\\spine\\SpineAnimation.js",
            "line": 225,
            "description": "Serialize spine animation as JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "..\\..\\source\\core\\objects\\sprite\\Sprite.js",
            "line": 14,
            "description": "Material used to render the sprite.",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Sprite",
            "module": "Sprite"
        },
        {
            "file": "..\\..\\source\\core\\objects\\sprite\\Sprite.js",
            "line": 31,
            "description": "Dispose the sprite material.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Sprite",
            "module": "Sprite"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 22,
            "description": "NunuRuntime instance used to communication between nunu app and the host webpage.\nInside the editor communication with the app is simulated on the debug console.",
            "itemtype": "property",
            "name": "app",
            "type": "{NunuApp}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 30,
            "description": "Program name.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 37,
            "description": "Program description",
            "itemtype": "property",
            "name": "description",
            "type": "{String}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 44,
            "description": "Program author",
            "itemtype": "property",
            "name": "author",
            "type": "{String}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 51,
            "description": "Program version",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "default": "\"0\"",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 59,
            "description": "Flag to control pointer locking",
            "itemtype": "property",
            "name": "lockPointer",
            "type": "{boolean}",
            "default": "false",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 67,
            "description": "Flag to indicate if the runtime should handle device pixel ratio",
            "itemtype": "property",
            "name": "handlePixelRatio",
            "type": "{boolean}",
            "default": "false",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 75,
            "description": "Enable virtual reality flag",
            "itemtype": "property",
            "name": "vr",
            "default": "false",
            "type": "{boolean}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 83,
            "description": "Virtual reality movement scale",
            "itemtype": "property",
            "name": "vrScale",
            "type": "{Number}",
            "default": "1.0",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 91,
            "description": "Antialiasing flag",
            "itemtype": "property",
            "name": "antialiasing",
            "type": "{boolean}",
            "default": "false",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 99,
            "description": "If true the program is rendered with shadows",
            "itemtype": "property",
            "name": "shadows",
            "type": "{boolean}",
            "default": "true",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 107,
            "description": "Shadow type",
            "itemtype": "property",
            "name": "shadowsType",
            "type": "{Number}",
            "default": "PCFSoftShadowMap",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 115,
            "description": "Tonemapping mode",
            "itemtype": "property",
            "name": "toneMapping",
            "type": "{Number}",
            "default": "NoToneMapping",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 130,
            "description": "Keyboard input object",
            "itemtype": "property",
            "name": "keyboard",
            "type": "{Keyboard}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 137,
            "description": "Mouse input object",
            "itemtype": "property",
            "name": "mouse",
            "type": "{Mouse}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 144,
            "description": "Renderer being used during runtime.",
            "itemtype": "property",
            "name": "renderer",
            "type": "{WebGLRenderer}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 151,
            "description": "Scene currently in use.",
            "itemtype": "property",
            "name": "scene",
            "type": "{Scene}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 158,
            "description": "Canvas being used to draw content.\n\nThis canvas is where the WebGL rendering context was created.",
            "itemtype": "property",
            "name": "canvas",
            "type": "{DOM}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 167,
            "description": "DOM Division element that can be used to add html content to the app.\n\nAll content added to this division should be manually removed before the app exits.",
            "itemtype": "property",
            "name": "division",
            "type": "{DOM}",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 196,
            "description": "Select initial scene and initialize that scene.\n\nAutomatically called by the runtime.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 248,
            "description": "Set program mouse and keyboard.",
            "itemtype": "method",
            "name": "setMouseKeyboard",
            "params": [
                {
                    "name": "mouse",
                    "description": "",
                    "type": "Mouse"
                },
                {
                    "name": "keyboard",
                    "description": "",
                    "type": "Keyboard"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 261,
            "description": "Set program renderer to be used by this program.",
            "itemtype": "method",
            "name": "setRenderer",
            "params": [
                {
                    "name": "renderer",
                    "description": "Three.js renderer to be used by this program",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "configure",
                    "description": "If true also updates renderer configuration to match rendering quality specified in the program.",
                    "type": "Bool"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 282,
            "description": "Update program state, this updated all current scene children elements.",
            "itemtype": "method",
            "name": "update",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 292,
            "description": "Render current scene to canvas.\n\nWhen rendering in VR mode all effects and camera parameters are ignored.\n\nRenderer should be initialized and passed as argument.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "Renderer"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 321,
            "description": "Resize the current scene elements.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "x",
                    "description": "Width.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Height.",
                    "type": "Number"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 353,
            "description": "This method updated the webgl renderer configuration.\n\nShould be called after changing any rendering related parameter.",
            "itemtype": "method",
            "name": "updateRenderer",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 372,
            "description": "Enter virtual reality mode.\n\nTo enter virtual reality mode a WebVR enabled browser is required.\n\nWhen displaying VR content the display.requestAnimationFrame should be used to call the render method.",
            "itemtype": "method",
            "name": "displayVR",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 400,
            "description": "Exit virtual relity mode.",
            "itemtype": "method",
            "name": "exitVR",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 414,
            "description": "Change scene during runtime, this method can receive booth a scene name or a scene object.\n\nThis method should be used inside of script objects during runtime.",
            "itemtype": "method",
            "name": "setScene",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene|String"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 444,
            "description": "Remove Scene from program.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 466,
            "description": "Add new scene to this program.\n\nOn the program class only scenes can be added as children.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 494,
            "description": "Clone program, keeping uuids and every identification attribute.\n\nClone method uses the ObjectLoad to serialize and create a new program instance with the same data.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Cloned program",
                "type": "Program"
            },
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 507,
            "description": "Set a scene as initial scene using its uuid.\n\nThis method is used by the editor.",
            "itemtype": "method",
            "name": "setInitialScene",
            "params": [
                {
                    "name": "uuid",
                    "description": "Scene uuid",
                    "type": "String"
                }
            ],
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 520,
            "description": "Dispose program data to avoid memory leaks.\n\nCalled when exiting the program.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 559,
            "description": "Receive external data and pass it to all script instances.",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "receiveDataApp",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 586,
            "description": "Send data to external app instance.",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "sendDataApp",
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Program.js",
            "line": 611,
            "description": "Serialize object to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "exportResources",
                    "description": "If true all resouces in the program are exported, else only resources attached to objects are exported",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Program",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 17,
            "description": "Cannon.js world used for physics simulation.\nThe world is configured by default with a NaiveBroadphase and a SplitSolver.\nDocumentation for cannon.js physics World object can be found here http://schteppe.github.io/cannon.js/docs/classes/World.html.",
            "itemtype": "property",
            "name": "world",
            "type": "World",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 23,
            "description": "Raycaster used for mouse interaction with 3D objects.\nThis raycaster is automatically updated using the first camera being drawn.",
            "itemtype": "property",
            "name": "raycaster",
            "type": "Raycaster",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 28,
            "description": "Normalized mouse coordinates used by the scene internal raycaster.",
            "itemtype": "property",
            "name": "mouse",
            "type": "Vector2",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 32,
            "description": "Program that contains this scene.",
            "itemtype": "property",
            "name": "program",
            "type": "Program",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 36,
            "description": "Canvas used to draw this scene.",
            "itemtype": "property",
            "name": "canvas",
            "type": "DOM",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 82,
            "description": "Initialize scene objects.\n\nCalled automatically by the runtime.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 102,
            "description": "Update scene objects and the physics world.\n\nCalled automatically by the runtime.",
            "itemtype": "method",
            "name": "update",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 130,
            "description": "Render scene using all active cameras.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "Renderer"
                }
            ],
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 161,
            "description": "Get camera from scene using cameras uuid.",
            "itemtype": "method",
            "name": "getCamera",
            "params": [
                {
                    "name": "uuid",
                    "description": "UUID of the camera",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Camera if found, else null",
                "type": "Camera"
            },
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 193,
            "description": "Add camera to active cameras list.",
            "itemtype": "method",
            "name": "addCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                }
            ],
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 208,
            "description": "Update active camera lister order.\n\nThis method should be called after changing order value for an active camera.",
            "itemtype": "method",
            "name": "updateCameraOrder",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 223,
            "description": "Remove camera from active camera list.",
            "params": [
                {
                    "name": "camera",
                    "description": "Camera to be removed",
                    "type": "Camera"
                }
            ],
            "itemtype": "method",
            "name": "removeCamera",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 238,
            "description": "Check is camera is active.",
            "params": [
                {
                    "name": "camera",
                    "description": "Camera to be removed",
                    "type": "Camera"
                }
            ],
            "itemtype": "method",
            "name": "isCameraActive",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 250,
            "description": "Set scene fog mode.",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setFogMode",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\objects\\Scene.js",
            "line": 274,
            "description": "Serialize scene object as JSON.\n\nAlso serializes physics world information.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\BokehPass.js",
            "line": 12,
            "description": "Focus point distance.",
            "itemtype": "property",
            "name": "focus",
            "type": "{Number}",
            "class": "BokehPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\BokehPass.js",
            "line": 18,
            "description": "Camera aperture.",
            "itemtype": "property",
            "name": "aperture",
            "type": "{Number}",
            "class": "BokehPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\BokehPass.js",
            "line": 24,
            "description": "Maximum level of blur that can be applied to more distant objects.",
            "itemtype": "property",
            "name": "enabled",
            "type": "{maxblur}",
            "class": "BokehPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\BokehPass.js",
            "line": 153,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "BokehPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\ColorifyPass.js",
            "line": 28,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "ColorifyPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\DotScreenPass.js",
            "line": 13,
            "description": "Center of rotation of the dot grid in normalized coordinates.",
            "itemtype": "property",
            "name": "center",
            "type": "{Vector2}",
            "class": "DotScreenPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\DotScreenPass.js",
            "line": 19,
            "description": "Rotation of the dot grid.",
            "itemtype": "property",
            "name": "angle",
            "type": "{Number}",
            "class": "DotScreenPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\DotScreenPass.js",
            "line": 25,
            "description": "Scale of the dots used in the effect.",
            "itemtype": "property",
            "name": "scale",
            "type": "{Number}",
            "class": "DotScreenPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\FilmPass.js",
            "line": 10,
            "description": "If set true a grascale effect will be applied.",
            "itemtype": "property",
            "name": "grayscale",
            "type": "{Boolean}",
            "class": "FilmPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\FilmPass.js",
            "line": 16,
            "description": "Ammout of noise to be applied to the image.",
            "itemtype": "property",
            "name": "noiseIntensity",
            "type": "{Number}",
            "class": "FilmPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\FilmPass.js",
            "line": 22,
            "description": "Scanline intensity.",
            "itemtype": "property",
            "name": "scanlinesIntensity",
            "type": "{Number}",
            "class": "FilmPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\FilmPass.js",
            "line": 28,
            "description": "Number of scanline to be displayed.",
            "itemtype": "property",
            "name": "scanlinesCount",
            "type": "{Number}",
            "class": "FilmPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\HueSaturationPass.js",
            "line": 39,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "HueSaturationPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 14,
            "description": "Ambient occlusion shadow radius.",
            "itemtype": "property",
            "name": "radius",
            "type": "{Number}",
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 20,
            "description": "Display only ambient occlusion result.",
            "itemtype": "property",
            "name": "onlyAO",
            "type": "{Boolean}",
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 26,
            "description": "Ambient occlusion clamp.",
            "itemtype": "property",
            "name": "aoClamp",
            "type": "{Number}",
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 32,
            "description": "Pixel luminosity influence in AO calculation.",
            "itemtype": "property",
            "name": "lumInfluence",
            "type": "{Number}",
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 98,
            "description": "Render using this pass.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "Buffer to write output.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "Input buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "Delta time in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "maskActive",
                    "description": "Not used in this pass.",
                    "type": "Boolean"
                }
            ],
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 123,
            "description": "Set resolution of this render pass.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\SSAOPass.js",
            "line": 136,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "SSAOPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 16,
            "description": "Scales the color of the whole bloom effect.",
            "itemtype": "property",
            "name": "strength",
            "type": "{Number}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 22,
            "description": "Bloom effect radius.",
            "itemtype": "property",
            "name": "radius",
            "type": "{Number}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 28,
            "description": "Defines how many luminance units a color needs to have to affect bloom. In addition to the threshold, there is a linear part (one unit wide) where the color only partly affects the bloom.\n\nTo have all scene colors contributing to the bloom, a volume of -1 needs to be used.",
            "itemtype": "property",
            "name": "threshold",
            "type": "{Number}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 36,
            "description": "Smooth factor.",
            "itemtype": "property",
            "name": "smooth",
            "type": "{Number}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 42,
            "description": "The size in percent of the screen width. Is clamped by some number. If you need a larger number, use the next lower resolution blur instead (higher number).",
            "itemtype": "property",
            "name": "bloomFactors",
            "type": "{Array}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 48,
            "description": "Modifies the brightness and color of each bloom. Using a black color will not make this pass faster but that can be done.",
            "itemtype": "property",
            "name": "bloomTintColors",
            "type": "{Array}",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\pass\\UnrealBloomPass.js",
            "line": 314,
            "description": "Serialize this effect composer to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "class": "UnrealBloomPass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 39,
            "description": "Swap rendering buffers.",
            "itemtype": "method",
            "name": "swapBuffers",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 51,
            "description": "Add new pass to the composer.",
            "itemtype": "method",
            "name": "addPass",
            "params": [
                {
                    "name": "pass",
                    "description": "Rendering pass to be added.",
                    "type": "Pass"
                }
            ],
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 62,
            "description": "Move pass back in the list of render passes.\n\nMoving back means that the pass is rendered earlier in the pipeline.",
            "itemtype": "method",
            "name": "moveBack",
            "params": [
                {
                    "name": "pass",
                    "description": "Pass to be moved.",
                    "type": "Pass"
                }
            ],
            "return": {
                "description": "Returns true on success, false otherwise.",
                "type": "Boolean"
            },
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 89,
            "description": "Move pass forward in the list of render passes.\n\nMoving forward in the list means being renderer later down the pipeline.",
            "itemtype": "method",
            "name": "moveForward",
            "params": [
                {
                    "name": "pass",
                    "description": "Pass to be moved.",
                    "type": "Pass"
                }
            ],
            "return": {
                "description": "Returns true on success, false otherwise.",
                "type": "Boolean"
            },
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 116,
            "description": "Remove pass from this composer, if pass is not found nothing happens.",
            "itemtype": "method",
            "name": "removePass",
            "params": [
                {
                    "name": "pass",
                    "description": "Pass to be removed from the composer.",
                    "type": "Pass"
                }
            ],
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 131,
            "description": "Insert new pass into the composer in a specific position.",
            "itemtype": "method",
            "name": "insertPass",
            "params": [
                {
                    "name": "pass",
                    "description": "Rendering pass to be added.",
                    "type": "Pass"
                },
                {
                    "name": "index",
                    "description": "Index to be inserted on.",
                    "type": "Number"
                }
            ],
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 143,
            "description": "Render a scene using this effect composer and a renderer.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "Render to be used to render the scene.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "scene",
                    "description": "Scene to render.",
                    "type": "Scene"
                },
                {
                    "name": "delta",
                    "description": "Delta time.",
                    "type": "[type]"
                }
            ],
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 193,
            "description": "Set rendering size for the composer.\n\nAlso updates the size for all passes attached to the composer.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "Width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height.",
                    "type": "Number"
                }
            ],
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 216,
            "description": "Reset this effect composer.",
            "itemtype": "method",
            "name": "reset",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 240,
            "description": "Dispose this effect composer.",
            "itemtype": "method",
            "name": "dispose",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 256,
            "description": "Serialize this effect composer to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\EffectComposer.js",
            "line": 276,
            "description": "Create a new effect composer loaded from json data.",
            "static": 1,
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "json",
                    "description": "JSON data to load.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Composer loaded from data.",
                "type": "EffectComposer"
            },
            "class": "EffectComposer",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\Pass.js",
            "line": 17,
            "description": "If set to true, the pass is processed by the composer.",
            "itemtype": "property",
            "name": "enabled",
            "type": "{Boolean}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\Pass.js",
            "line": 25,
            "description": "If set to true, the pass indicates to swap read and write buffer after rendering.",
            "itemtype": "property",
            "name": "needsSwap",
            "type": "{Boolean}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\Pass.js",
            "line": 33,
            "description": "If set to true, the pass clears its buffer before rendering.",
            "itemtype": "property",
            "name": "clear",
            "type": "{Boolean}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\Pass.js",
            "line": 41,
            "description": "If set to true, the result of the pass is rendered to screen.",
            "itemtype": "property",
            "name": "renderToScreen",
            "type": "{Boolean}",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\Pass.js",
            "line": 50,
            "description": "Set resolution of this render pass.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\Pass.js",
            "line": 59,
            "description": "Render the scene using this render pass.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "Buffer to write output.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "Input buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "Delta time in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "maskActive",
                    "description": "Not used in this pass.",
                    "type": "Boolean"
                },
                {
                    "name": "scene",
                    "description": "Scene to render.",
                    "type": "Scene"
                }
            ],
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\Pass.js",
            "line": 72,
            "description": "Dispose this render pass.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\postprocessing\\Pass.js",
            "line": 79,
            "description": "Serialize pass to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata object.",
                    "type": "Object"
                }
            ],
            "class": "Pass",
            "module": "Postprocessing"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Audio.js",
            "line": 44,
            "description": "Check if a file name refers to a supported audio file.",
            "itemtype": "method",
            "name": "fileIsAudio",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "File"
                }
            ],
            "return": {
                "description": "True if the file refers to a supported audio format.",
                "type": "Boolean"
            },
            "class": "Audio",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Audio.js",
            "line": 65,
            "description": "Get an WebAudio buffer to play the audio stored in this resources.\n\nThis method is asyncronous and the value is returned using a callback function.",
            "itemtype": "method",
            "name": "getAudioBuffer",
            "params": [
                {
                    "name": "context",
                    "description": "WebAudio context used to decode the audio data.",
                    "type": "AudioContext"
                },
                {
                    "name": "callback",
                    "description": "Callback funtion that receives an audio buffer as argument.",
                    "type": "Function"
                }
            ],
            "class": "Audio",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Audio.js",
            "line": 83,
            "description": "Serialize audio data as json.\n\nAudio data is serialized in Base64.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Meta"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "Audio",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Font.js",
            "line": 17,
            "description": "If true the font glyphs are reversed.",
            "itemtype": "property",
            "name": "reversed",
            "type": "{boolean}",
            "default": "false",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Font.js",
            "line": 26,
            "description": "Font data, can be an ArrayBuffer or JSON.",
            "itemtype": "property",
            "name": "font",
            "type": "{Object}",
            "default": "null",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Font.js",
            "line": 76,
            "description": "Check if a file name refers to a font file.",
            "itemtype": "method",
            "name": "fileIsFont",
            "static": 1,
            "params": [
                {
                    "name": "fname",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the fname refers to a supported font format.",
                "type": "Boolean"
            },
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Font.js",
            "line": 98,
            "description": "Reverse the font glyphs.\n\nCan be used to fix fonts that have paths defined CW.",
            "itemtype": "method",
            "name": "reverseGlyphs",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Font.js",
            "line": 112,
            "description": "Load font from data using the TTF loader.",
            "itemtype": "method",
            "name": "loadTTF",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Font.js",
            "line": 124,
            "description": "Serialize font resource to json.\n\nFont data is stored as Base64 is present in a binary format, or JSON otherwise.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Font.js",
            "line": 166,
            "description": "Generate shapes from font data.\n\nThe shapes generated can be extruded to create 3D geometry.",
            "itemtype": "method",
            "name": "generateShapes",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "divisions",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "paths",
                "type": "Array"
            },
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Image.js",
            "line": 53,
            "description": "Check if a file name refers to a supported binary image file.",
            "itemtype": "method",
            "name": "fileIsImage",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "File"
                }
            ],
            "return": {
                "description": "True if the file refers to a supported image format.",
                "type": "Boolean"
            },
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Image.js",
            "line": 78,
            "description": "Create a new image with 1x1 resolution with solid color.\n\nCan be called externally on data load error to load dummy data.",
            "itemtype": "method",
            "name": "createSolidColor",
            "params": [
                {
                    "name": "color",
                    "description": "Color code",
                    "type": "String"
                }
            ],
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Image.js",
            "line": 101,
            "description": "Load arraybuffer data to this image.\n\nCreates a blob with data to be stored on data atribute and used by external objects.",
            "itemtype": "method",
            "name": "loadArrayBufferData",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be loaded.",
                    "type": "ArrayBuffer"
                },
                {
                    "name": "encoding",
                    "description": "Image enconding (jpeg, png, etc).",
                    "type": "String"
                }
            ],
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Image.js",
            "line": 121,
            "description": "Check if this image has alpha channel.\n\nThis checks the file encoding if the file a GIF or a PNG is assumed that the file has alpha channel.",
            "itemtype": "method",
            "name": "hasTransparency",
            "return": {
                "description": "True if the image is encoded as PNG or GIF",
                "type": "Boolean"
            },
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Image.js",
            "line": 155,
            "description": "Compresses image data to JPEG.\n\nCan be used to compress data and save some space.",
            "itemtype": "method",
            "name": "compressJPEG",
            "params": [
                {
                    "name": "quality",
                    "description": "JPEG compression quality level by default 0.7 is used (1.0  means max quality).",
                    "type": "Number"
                }
            ],
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Image.js",
            "line": 193,
            "description": "Serialize Image resource to json.\n\nIf image is stored as URL it is converter to PNG or JPEG.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Image",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Model.js",
            "line": 19,
            "description": "List of file types supported for 3D models.",
            "itemtype": "property",
            "name": "extensions List of extensions.",
            "type": "{Array}",
            "class": "Model",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Model.js",
            "line": 27,
            "description": "Check if a file name refers to a 3D geometry file.",
            "itemtype": "method",
            "name": "fileIsFont",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "File"
                }
            ],
            "return": {
                "description": "True if the fname refers to a supported format.",
                "type": "Boolean"
            },
            "class": "Model",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Resource.js",
            "line": 12,
            "description": "Resource name.\n\nNot required to be unique.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Resource.js",
            "line": 20,
            "description": "UUID unique identifier.",
            "itemtype": "property",
            "name": "uuid",
            "type": "{String}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Resource.js",
            "line": 26,
            "description": "Resource type. Used to identify the type of the resource, usefull for serialization.",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Resource.js",
            "line": 32,
            "description": "Data format (base64, arraybuffer, blob, url, ...).\n\nIndicates the format used to store the data.",
            "itemtype": "property",
            "name": "format",
            "type": "{Object}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Resource.js",
            "line": 40,
            "description": "Data encoding (mp3, jpg, mp4, ...).\n\nIndicates how the data is encoded.",
            "itemtype": "property",
            "name": "encoding",
            "type": "{String, ArrayBuffer, ...}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Resource.js",
            "line": 48,
            "description": "Resource data.",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Resource.js",
            "line": 65,
            "description": "Export resource data to file.",
            "itemtype": "method",
            "name": "export",
            "params": [
                {
                    "name": "fname",
                    "description": "File name or file path.",
                    "type": "String"
                }
            ],
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Resource.js",
            "line": 95,
            "description": "Serialize resource to json.\n\nOnly serializes name, uuid and type.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 18,
            "description": "Constructor method for a resource container object.\n\nThe container is used to store the following types of resources:\n - Images\n - Videos\n - Audio\n - Fonts\n - Textures\n - Materials\n - Geometries\n - Shapes",
            "itemtype": "method",
            "name": "ResourceContainer",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 35,
            "description": "Images.",
            "itemtype": "property",
            "name": "images",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 43,
            "description": "Videos.",
            "itemtype": "property",
            "name": "videos",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 51,
            "description": "Audio.",
            "itemtype": "property",
            "name": "audio",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 59,
            "description": "Fonts.",
            "itemtype": "property",
            "name": "fonts",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 67,
            "description": "Materials.",
            "itemtype": "property",
            "name": "materials",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 75,
            "description": "Textures.",
            "itemtype": "property",
            "name": "textures",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 83,
            "description": "Geometries.",
            "itemtype": "property",
            "name": "geometries",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 91,
            "description": "Resources.",
            "itemtype": "property",
            "name": "resources",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 99,
            "description": "Shapes.",
            "itemtype": "property",
            "name": "shapes",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 107,
            "description": "Skeletons.",
            "itemtype": "property",
            "name": "skeletons",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 118,
            "description": "Searches the object and all its children for resources that still dont exist in the resource manager.\n\nStores them in a resource container object that is returned.",
            "static": 1,
            "itemtype": "method",
            "name": "searchObject",
            "params": [
                {
                    "name": "object",
                    "description": "Object to search for resources.",
                    "type": "THREE.Object3D"
                },
                {
                    "name": "manager",
                    "description": "Resource manager object.",
                    "type": "ResourceManager"
                },
                {
                    "name": "target",
                    "description": "Optional resource container object that can be used to store the found resources.",
                    "type": "ResourceContainer"
                }
            ],
            "return": {
                "description": "Object with the new resources found in the object.",
                "type": "ResourceContainer"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 356,
            "description": "Get resource by name.",
            "itemtype": "method",
            "name": "getResourceByName",
            "params": [
                {
                    "name": "name",
                    "description": "Resource name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Resource if found else null",
                "type": "Resource"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 377,
            "description": "Add resource to resources manager.",
            "itemtype": "method",
            "name": "addResource",
            "params": [
                {
                    "name": "Resource",
                    "description": "to add.",
                    "type": "Resource"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 391,
            "description": "Remove resource from font list.",
            "itemtype": "method",
            "name": "removeResource",
            "params": [
                {
                    "name": "resource",
                    "description": "",
                    "type": "Resource"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 402,
            "description": "Get image by name.",
            "itemtype": "method",
            "name": "getImageByName",
            "params": [
                {
                    "name": "name",
                    "description": "Image name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Image if found else null",
                "type": "Image"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 423,
            "description": "Remove image.",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Image"
                }
            ],
            "itemtype": "method",
            "name": "removeImage",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 438,
            "description": "Get video by name.",
            "itemtype": "method",
            "name": "getVideoByName",
            "params": [
                {
                    "name": "name",
                    "description": "Video name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Video if found else null",
                "type": "Video"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 459,
            "description": "Remove video.",
            "params": [
                {
                    "name": "video",
                    "description": "",
                    "type": "Video"
                }
            ],
            "itemtype": "method",
            "name": "removeVideo",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 473,
            "description": "Get material by its name.",
            "itemtype": "method",
            "name": "getMaterialByName",
            "params": [
                {
                    "name": "name",
                    "description": "Material name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Material if found else null",
                "type": "Material"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 494,
            "description": "Add material to materials list.",
            "itemtype": "method",
            "name": "addMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "Material to be added",
                    "type": "Material"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 508,
            "description": "Remove material from materials list, also receives default material used to replace.",
            "itemtype": "method",
            "name": "removeMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "Material to be removed from manager.",
                    "type": "Material"
                },
                {
                    "name": "defaultMaterial",
                    "description": "Default mesh material to replace objects mesh materials.",
                    "type": "Material"
                },
                {
                    "name": "defaultMaterialSprite",
                    "description": "Defaul sprite material.",
                    "type": "Material"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 549,
            "description": "Get texture by name.",
            "itemtype": "method",
            "name": "getTextureByName",
            "params": [
                {
                    "name": "name",
                    "description": "Texture name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Texture is found else null.",
                "type": "Texture"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 570,
            "description": "Add texture to texture list.",
            "itemtype": "method",
            "name": "addTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 584,
            "description": "Remove texture from textures list (also receives default used to replace).",
            "itemtype": "method",
            "name": "removeTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "defaultTexture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "return": {
                "description": "Texture if found, else null",
                "type": "Texture"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 671,
            "description": "Get font by name.",
            "itemtype": "method",
            "name": "getFontByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Font if found, else null",
                "type": "Font"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 692,
            "description": "Add font to fonts list.",
            "itemtype": "method",
            "name": "addFont",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "Font"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 706,
            "description": "Remove font from font list.",
            "itemtype": "method",
            "name": "removeFont",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "Font"
                },
                {
                    "name": "defaultFont",
                    "description": "",
                    "type": "Font"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 734,
            "description": "Get audio by name.",
            "itemtype": "method",
            "name": "getAudioByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Audio if found, else null",
                "type": "Audio"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 755,
            "description": "Add audio to audio list.",
            "params": [
                {
                    "name": "audio",
                    "description": "",
                    "type": "Audio"
                }
            ],
            "itemtype": "method",
            "name": "addAudio",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\ResourceManager.js",
            "line": 769,
            "description": "Remove audio.",
            "params": [
                {
                    "name": "audio",
                    "description": "",
                    "type": "Audio"
                },
                {
                    "name": "defaultAudio",
                    "description": "",
                    "type": "Audio"
                }
            ],
            "itemtype": "method",
            "name": "removeAudio",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\TextFile.js",
            "line": 25,
            "description": "Check if a file name refers to a text file.",
            "itemtype": "method",
            "name": "fileIsText",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "File"
                }
            ],
            "return": {
                "description": "True if the file is text.",
                "type": "Boolean"
            },
            "class": "TextFile",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\TextFile.js",
            "line": 48,
            "description": "Serialize File resource data to json.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Meta"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "TextFile",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Video.js",
            "line": 42,
            "description": "Check if a file name refers to a supported video file.",
            "itemtype": "method",
            "name": "fileIsVideo",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "File"
                }
            ],
            "return": {
                "description": "True if the file refers to a supported video format.",
                "type": "Boolean"
            },
            "class": "Video",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Video.js",
            "line": 63,
            "description": "Load arraybuffer data to this image.\n\nCreates a blob with data to be stored on data atribute and used by external objects.",
            "itemtype": "method",
            "name": "loadArrayBufferData",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be loaded.",
                    "type": "ArrayBuffer"
                },
                {
                    "name": "encoding",
                    "description": "Video enconding (mp4, webm, etc).",
                    "type": "String"
                }
            ],
            "class": "Video",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\resources\\Video.js",
            "line": 83,
            "description": "Serialize resource to json.\n\nVideo data is stored in Base64.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Video",
            "module": "Resources"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CanvasTexture.js",
            "line": 25,
            "description": "Image is used to store a DOM canvas element.",
            "itemtype": "property",
            "name": "image",
            "type": "{DOM}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CanvasTexture.js",
            "line": 37,
            "description": "Canvas width.",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CanvasTexture.js",
            "line": 45,
            "description": "Canvas height.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CanvasTexture.js",
            "line": 53,
            "description": "Canvas context 2D, can be used to draw content do the canvas texture.",
            "itemtype": "property",
            "name": "context",
            "type": "{Context2D}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CanvasTexture.js",
            "line": 65,
            "description": "Update the size of the canvas texture.\n\nThe texture is image is reset to the default.\n\nShould be called after changing the width or height properties.",
            "itemtype": "method",
            "name": "updateSize",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CanvasTexture.js",
            "line": 89,
            "description": "Clear canvas texture with a background color.\n\nUses the internal context to draw a rect to fill the canvas.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CanvasTexture.js",
            "line": 103,
            "description": "Create JSON description for canvas texture, canvas image is not serialized.",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "toJSON",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 42,
            "description": "Size of each one of the texture that compose the CubeTexture.",
            "itemtype": "property",
            "name": "size",
            "type": "{Number}",
            "default": "512",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 53,
            "description": "Cube texture mode, the mode specifies how the cube texture is created.\n\nSource format may vary from a mode to another.",
            "itemtype": "property",
            "name": "mode",
            "type": "{Number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 75,
            "description": "Cubemap right image index",
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{Number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 83,
            "description": "Cubemap left image index",
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{Number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 91,
            "description": "Cubemap top image index",
            "itemtype": "attribute",
            "name": "TOP",
            "type": "{Number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 99,
            "description": "Cubemap bottom image index",
            "itemtype": "attribute",
            "name": "BOTTOM",
            "type": "{Number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 107,
            "description": "Cubemap front image index",
            "itemtype": "attribute",
            "name": "FRONT",
            "type": "{Number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 115,
            "description": "Cubemap back image index",
            "itemtype": "attribute",
            "name": "BACK",
            "type": "{Number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 123,
            "description": "CubeMap mode, 6 images used as source for the texture.",
            "itemtype": "attribute",
            "name": "CUBE",
            "type": "{Number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 131,
            "description": "CubeMap mode, single image used as source.",
            "itemtype": "attribute",
            "name": "CROSS",
            "type": "{Number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 139,
            "description": "Equirectangular projection mode, 1 single image used as source.\n\nSource image should have a 2:1 aspect ratio.",
            "itemtype": "attribute",
            "name": "EQUIRECTANGULAR",
            "type": "{Number}",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 150,
            "description": "Set resolution of each face of the cubemap.\n\nThe size has to be a power of 2.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "Cube face resolution.",
                    "type": "Number"
                }
            ],
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 169,
            "description": "Set new images for this cube texture.",
            "itemtype": "method",
            "name": "setImages",
            "params": [
                {
                    "name": "images",
                    "description": "Cube texture images.",
                    "type": "Array"
                },
                {
                    "name": "mode",
                    "description": "Mode to be used.",
                    "type": "Number"
                }
            ],
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 182,
            "description": "Updates the CubeTexture images, should be called after changing the images attached to the texture",
            "itemtype": "method",
            "name": "updateImages",
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 271,
            "description": "Resample an image pixel from ImageData to ImageData, using bilinear interpolation.",
            "itemtype": "method",
            "name": "resampleBilinear",
            "params": [
                {
                    "name": "read",
                    "description": "Where to read data from.",
                    "type": "ImageData"
                },
                {
                    "name": "write",
                    "description": "Where to write data.",
                    "type": "ImageData"
                },
                {
                    "name": "x",
                    "description": "Origin pixel x.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Origin pixel y.",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "Target index.",
                    "type": "Number"
                }
            ],
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 309,
            "description": "Render a cube face from equirectangular projection.",
            "itemtype": "method",
            "name": "renderEquirectFace",
            "params": [
                {
                    "name": "read",
                    "description": "Equirectangular image.",
                    "type": "ImageData"
                },
                {
                    "name": "face",
                    "description": "Face to render.",
                    "type": "Number"
                },
                {
                    "name": "rotation",
                    "description": "Image rotation",
                    "type": "Number"
                },
                {
                    "name": "size",
                    "description": "Face size.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Face data.",
                "type": "ImageData"
            },
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\CubeTexture.js",
            "line": 379,
            "description": "Serialize cube texture to JSON.\n\nAll images of the cube texture are stored individually.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "CubeTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 40,
            "description": "If true the animation plays in loop.",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{boolean}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 48,
            "description": "Animation speed in seconds.",
            "itemtype": "property",
            "name": "animationSpeed",
            "default": "0.1",
            "type": "{Number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 65,
            "description": "Spritesheet number of frames horizontally.\n\nWhen this values is changed the totalFrames value is automatically updated to framesHorizontal * framesVertical.",
            "itemtype": "property",
            "name": "framesHorizontal",
            "default": "1.0",
            "type": "{Number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 87,
            "description": "Spritesheet number of frames vertically.\n\nWhen this values is changed the totalFrames value is automatically updated to framesHorizontal * framesVertical.",
            "itemtype": "property",
            "name": "framesVertical",
            "default": "1.0",
            "type": "{Number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 109,
            "description": "The offset frame can be ajusted to control in which frame the animation ends.",
            "itemtype": "property",
            "name": "endFrame",
            "type": "{Number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 131,
            "description": "The offset frame can be ajusted to control in which frame the animation starts.",
            "itemtype": "property",
            "name": "beginFrame",
            "default": "0",
            "type": "{Number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 155,
            "description": "Total number of frames present in the texture.\n\nSometimes a NxM spritesheet does not have all spaces filled, this parameter is used to take care of those cases.",
            "itemtype": "property",
            "name": "totalFrames",
            "default": "1",
            "type": "{Number}",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 211,
            "description": "Set animation playback speed.",
            "itemtype": "method",
            "name": "setAnimationSpeed",
            "params": [
                {
                    "name": "animationSpeed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 222,
            "description": "Set the sprite sheet grid dimension.\n\nAutomatically sets the totalFrame value to framesHorizontal * framesVertical.",
            "itemtype": "method",
            "name": "setFrameGrid",
            "params": [
                {
                    "name": "framesHorizontal",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "framesVertical",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 239,
            "description": "Set frames to be used for this animation.\n\nFrame starts counting from 0.",
            "itemtype": "method",
            "name": "setAnimationFrames",
            "params": [
                {
                    "name": "beginFrame",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "endFrame",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 254,
            "description": "Dispose spritesheet texture.",
            "itemtype": "method",
            "name": "dispose",
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\SpriteSheetTexture.js",
            "line": 266,
            "description": "Create texture json description.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "SpriteSheetTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 22,
            "description": "UUID of this object instance. This gets automatically assigned, so this shouldn't be edited.",
            "itemtype": "property",
            "name": "uuid",
            "type": "{String}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 27,
            "description": "How much a single repetition of the texture is offset from the beginning, in each direction U and V.",
            "itemtype": "property",
            "name": "offset",
            "type": "{Vector2}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 33,
            "description": "How many times the texture is repeated across the surface, in each direction U and V.  If repeat is set greater than 1 in either direction, the corresponding Wrap parameter should also be set to .",
            "itemtype": "property",
            "name": "repeat",
            "type": "{Vector2}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 39,
            "description": "Indicates where the center of rotation is. To rotate around the center point set this value to (0.5, 0.5).",
            "itemtype": "property",
            "name": "center",
            "type": "{Vector2}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 45,
            "description": "How much the texture is rotated around the center point, in radians. Postive values are counter-clockwise.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{Number}",
            "default": "0",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 52,
            "description": "False by default, which is the norm for PNG images. Set to true if the RGB values have been stored premultiplied by alpha.",
            "itemtype": "property",
            "name": "premultiplyAlpha",
            "type": "{Boolean}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 58,
            "description": "Flips the image's Y axis to match the WebGL texture coordinate space.",
            "itemtype": "property",
            "name": "flipY",
            "type": "{Boolean}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 64,
            "description": "Array of user-specified mipmaps (optional).",
            "itemtype": "property",
            "name": "mipmaps",
            "type": "{Array}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 72,
            "description": "Image attached to the texture",
            "itemtype": "property",
            "name": "img",
            "type": "{Image}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 95,
            "description": "Name of the texture (doesn't need to be unique).",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 103,
            "description": "Flag used to know is the texture has been disposed.\n\nIs used to control animation when using a gif as a texture.",
            "itemtype": "property",
            "name": "disposed",
            "type": "{boolean}",
            "default": "false",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 116,
            "description": "DOM element attached to the texture",
            "itemtype": "property",
            "name": "image",
            "type": "{DOM}",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 159,
            "description": "Dispose texture.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\Texture.js",
            "line": 171,
            "description": "Create JSON description for texture, serializes image used in the texture\nTHREE.Texture serialization is different inside nunuStudio, the THREE.Texture class does not serialize any image data.",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "toJSON",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 20,
            "description": "Image is used to store a DOM video element.",
            "itemtype": "property",
            "name": "image",
            "type": "{DOM}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 45,
            "description": "If true the video starts playing automatically.",
            "itemtype": "property",
            "name": "autoplay",
            "default": "true",
            "type": "{boolean}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 53,
            "description": "If true the video plays in loop.",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{boolean}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 61,
            "description": "Start time in seconds.",
            "itemtype": "property",
            "name": "playbackRate",
            "default": "1.0",
            "type": "{Number}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 69,
            "description": "Video audio volume, its a values between 1.0 and 0.0",
            "itemtype": "property",
            "name": "volume",
            "default": "1.0",
            "type": "{Number}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 103,
            "description": "Set video time in seconds.",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setTime",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 114,
            "description": "Set loop mode.",
            "params": [
                {
                    "name": "loop",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setLoop",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 126,
            "description": "Set video volume.",
            "params": [
                {
                    "name": "volume",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setVolume",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 138,
            "description": "Set autoplay value.\n\nIf the image is already playing it will not stop playing.",
            "itemtype": "method",
            "name": "setAutoPlay",
            "params": [
                {
                    "name": "value",
                    "description": "If true the video will play automatically.",
                    "type": "Boolean"
                }
            ],
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 152,
            "description": "Set video playback speed.",
            "itemtype": "method",
            "name": "setPlaybackRate",
            "params": [
                {
                    "name": "playbackRate",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 164,
            "description": "Pause video playback.",
            "itemtype": "method",
            "name": "pause",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 177,
            "description": "Start playing video.",
            "itemtype": "method",
            "name": "play",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 190,
            "description": "Dispose video texture.\n\nStops the video and cleans the DOM video element inside the VideoTexture.",
            "itemtype": "method",
            "name": "dispose",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\VideoTexture.js",
            "line": 208,
            "description": "Create Video texture json description.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "line": 22,
            "description": "Image is used to store a DOM video element",
            "itemtype": "property",
            "name": "image",
            "type": "{DOM}",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "line": 39,
            "description": "Webcam video, media stream",
            "itemtype": "property",
            "name": "stream",
            "type": "{MediaStream}",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "line": 67,
            "description": "Prefer the front facing camera.",
            "static": 1,
            "itemtype": "attribute",
            "name": "USER",
            "type": "{Number}",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "line": 76,
            "description": "Prefer the back camera.",
            "static": 1,
            "itemtype": "attribute",
            "name": "ENVIRONMENT",
            "type": "{Number}",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "line": 87,
            "description": "Connect to camera.",
            "itemtype": "method",
            "name": "connect",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "line": 130,
            "description": "Disconnect from camera.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "line": 147,
            "description": "Dispose webcam texture.",
            "itemtype": "method",
            "name": "dispose",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\texture\\WebcamTexture.js",
            "line": 165,
            "description": "Serialize webcam texture to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata.",
                    "type": "Object"
                }
            ],
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 3,
            "description": "Folded attribute is used only for editing, if true the object shows as folded in the object explorer.",
            "itemtype": "property",
            "name": "folded",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 11,
            "description": "Indicates if the object is locked. A locked object cannot be edited.",
            "itemtype": "property",
            "name": "locked",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 19,
            "description": "Check if this object contains a object.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "object",
                    "description": "Object to look for.",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "True if this object contains the object.",
                "type": "Boolean"
            },
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 39,
            "description": "Play animations attached to this object.\n\nAnimations rely on other objects, if some of these are missing the animation will have problems playing.",
            "itemtype": "method",
            "name": "playAnimation",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 54,
            "description": "Stop all animations playback.",
            "itemtype": "method",
            "name": "stopAnimation",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 67,
            "description": "Initializes the object.\n\nThis method is calling one time on initialization.",
            "itemtype": "method",
            "name": "initialize",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 89,
            "description": "Update the object state.\n\nCalled every time before rendering into the screen.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "delta",
                    "description": "Time since last update call.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 110,
            "description": "Resize this object, called everytime the window is resized.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "x",
                    "description": "Screen width.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Screen height.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 125,
            "description": "Disposes the object from memory.\n\nShould be called when the object is no longer required to avoid memory leaks.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 145,
            "description": "Add object as children of this object above the indicated children",
            "itemtype": "method",
            "name": "addAbove",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 182,
            "description": "Add object as children of this object bellow the indicated children",
            "itemtype": "method",
            "name": "addBellow",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 219,
            "description": "Get scene that contains this object.",
            "itemtype": "method",
            "name": "getScene",
            "return": {
                "description": "scene",
                "type": "Object3D"
            },
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 242,
            "description": "Remove all children from the object.",
            "itemtype": "method",
            "name": "removeAll",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 255,
            "description": "Check if object is empty (has no childrens).",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "True is object is empty",
                "type": "Boolean"
            },
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 266,
            "description": "Destroy object, dispose and remove from its parent.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 290,
            "description": "Serialize object to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "resourceAccess",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "recursive",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Object3D",
            "module": "Textures"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 471,
            "description": "Array with object's children.",
            "itemtype": "property",
            "name": "children",
            "type": "{Array}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 476,
            "description": "When this is set, it checks every frame if the object is in the frustum of the camera before rendering the object. Otherwise the object gets renderered every frame even if it isn't visible.",
            "itemtype": "property",
            "name": "frustumCulled",
            "default": "true",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 482,
            "description": "The layer membership of the object. The object is only visible if it has at least one layer in common with the Camera in use.",
            "itemtype": "property",
            "name": "layers",
            "type": "{Layers}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 487,
            "description": "The local transform matrix",
            "itemtype": "property",
            "name": "matrix",
            "type": "{Matrix4}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 492,
            "description": "When this is set, it calculates the matrix of position, (rotation or quaternion) and scale every frame and also recalculates the matrixWorld property.",
            "itemtype": "property",
            "name": "matrixAutoUpdate",
            "default": "true",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 498,
            "description": "The global transform of the object. If the Object3d has no parent, then it's identical to the local transform.",
            "itemtype": "property",
            "name": "matrixWorld",
            "type": "{Matrix4}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 503,
            "description": "Name of the object (doesn't need to be unique).",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 508,
            "description": "The object's local position.",
            "itemtype": "property",
            "name": "position",
            "type": "{Vector3}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 513,
            "description": "Object's local rotation as a Quaternion.",
            "itemtype": "property",
            "name": "quaternion",
            "type": "{Quaternion}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 518,
            "description": "Object's local rotation (see Euler angles), in radians.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{Euler}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 523,
            "description": "The object's local scale.",
            "itemtype": "property",
            "name": "scale",
            "type": "{Vector3}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 528,
            "description": "This is used by the lookAt method, for example, to determine the orientation of the result.",
            "itemtype": "property",
            "name": "up",
            "type": "{Vector3}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 533,
            "description": "UUID of this object instance. This gets automatically assigned, so this shouldn't be edited.",
            "itemtype": "property",
            "name": "uuid",
            "type": "{String}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 538,
            "description": "Object gets rendered if true.",
            "itemtype": "property",
            "name": "visible",
            "type": "{boolean}",
            "default": "true",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 544,
            "description": "This value allows the default rendering order of scene graph objects to be overridden although opaque and transparent objects remain sorted independently.",
            "itemtype": "property",
            "name": "renderOrder",
            "default": "0",
            "type": "{Number}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 550,
            "description": "Whether the object gets rendered into shadow map.",
            "itemtype": "property",
            "name": "castShadow",
            "default": "false",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 556,
            "description": "Whether the material receives shadows.",
            "itemtype": "property",
            "name": "receiveShadow",
            "default": "false",
            "type": "{boolean}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 562,
            "description": "Space reserved for user data, can be used for variables in runtime or can be used by scripts to store values on an object.",
            "itemtype": "property",
            "name": "userData",
            "type": "{Object}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 567,
            "description": "Array with the animations available in this object.\n\nEach position contains an AnimationClip that has name, tracks, duration and uuid.",
            "itemtype": "property",
            "name": "animations",
            "type": "{Array}",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 576,
            "description": "Remove children from this object",
            "params": [
                {
                    "name": "objects",
                    "description": "Removes object as child of this object. An arbitrary number of objects may be removed.",
                    "type": "Object3D"
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 582,
            "description": "Rotates the object to face a point in world space.",
            "params": [
                {
                    "name": "vector",
                    "description": "A vector representing a position in world space.",
                    "type": "Vector3"
                }
            ],
            "itemtype": "method",
            "name": "lookAt",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 588,
            "description": "Converts the vector from local space to world space.",
            "params": [
                {
                    "name": "vector",
                    "description": "vector representing a position in local (object) space.",
                    "type": "Vector3"
                }
            ],
            "itemtype": "method",
            "name": "localToWorld",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 594,
            "description": "Updates the vector from world space to local space.",
            "params": [
                {
                    "name": "vector",
                    "description": "A world vector",
                    "type": "Vector3"
                }
            ],
            "itemtype": "method",
            "name": "worldToLocal",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 600,
            "description": "Adds object as child of this object. An arbitrary number of objects may be added.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "objects",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 606,
            "description": "This updates the position, rotation and scale with the matrix.",
            "itemtype": "method",
            "name": "applyMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix4"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 612,
            "description": "Returns a clone of this object and optionaly all descendants.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "recursive",
                    "description": "If true, descendants of the object are also cloned. Default is true.",
                    "type": "Boolean"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 618,
            "description": "Copy the given object into this object.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "recursive",
                    "description": "If true, descendants of the object are also copied. Default is true.",
                    "type": "Boolean"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 625,
            "description": "Searches through the object's children and returns the first with a matching name.",
            "params": [
                {
                    "name": "name",
                    "description": "String to match to the children's Object3d.name property.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getObjectByName",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 631,
            "description": "Searches through the object's children and returns the first with a property that matches the aclue given.",
            "params": [
                {
                    "name": "name",
                    "description": "The property name to search for.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value of the given property.",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "getObjectByProperty",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 638,
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "Target to set the result. Otherwise, a new Vector3 is instantiated.",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "Returns a vector representing the position of the object in world space.",
                "type": "Vector3"
            },
            "itemtype": "method",
            "name": "getWorldPosition",
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 644,
            "description": "Returns a quaternion representing the rotation of the object in world space.",
            "itemtype": "method",
            "name": "getWorldQuaternion",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Quaternion, otherwise a new Quaternion will be created.",
                    "type": "Quaternion"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 650,
            "description": "Returns a vector of the scaling factors applied to the object for each axis in world space.",
            "itemtype": "method",
            "name": "getWorldScale",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Vector3, otherwise a new Vector3 will be created.",
                    "type": "Vector3"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 656,
            "description": "Returns a vector representing the direction of object's positive z-axis in world space.",
            "itemtype": "method",
            "name": "getWorldDirection",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Vector3, otherwise a new Vector3 will be created.",
                    "type": "Vector3"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 662,
            "description": "Rotate an object along an axis in object space. The axis is assumed to be normalized..",
            "itemtype": "method",
            "name": "rotateOnAxis",
            "params": [
                {
                    "name": "axis",
                    "description": "A normalized vector in object space.",
                    "type": "Vector3"
                },
                {
                    "name": "angle",
                    "description": "The angle in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 669,
            "description": "Rotates the object around x axis in local space.",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 675,
            "description": "Rotates the object around y axis in local space.",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\core\\Object3D.js",
            "line": 681,
            "description": "Rotates the object around z axis in local space.",
            "itemtype": "method",
            "name": "rotateZ",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "Object3D",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\materials\\Material.js",
            "line": 12,
            "description": "Dispose material.\n\nAlso disposes all the textures attached to the material.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Material",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\materials\\Material.js",
            "line": 43,
            "description": "Serialize material to JSON data.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "Metadata.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON data.",
                "type": "Object"
            },
            "class": "Material",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\scenes\\Fog.js",
            "line": 12,
            "description": "No fog",
            "itemtype": "attribute",
            "name": "NONE",
            "type": "{Number}",
            "class": "Fog",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\scenes\\Fog.js",
            "line": 20,
            "description": "Linear fog",
            "itemtype": "attribute",
            "name": "LINEAR",
            "type": "{Number}",
            "class": "Fog",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\three\\scenes\\Fog.js",
            "line": 28,
            "description": "Exponential fog",
            "itemtype": "attribute",
            "name": "EXPONENTIAL",
            "type": "{Number}",
            "class": "Fog",
            "module": "THREE"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\ArraybufferUtils.js",
            "line": 12,
            "description": "Create arraybuffer from binary string",
            "itemtype": "method",
            "name": "fromBinaryString",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Arraybuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\ArraybufferUtils.js",
            "line": 33,
            "description": "Create arraybuffer from base64 string",
            "itemtype": "method",
            "name": "fromBase64",
            "params": [
                {
                    "name": "base64",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Arraybuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\ArraybufferUtils.js",
            "line": 70,
            "description": "Create arraybuffer from Nodejs buffer",
            "itemtype": "method",
            "name": "fromBuffer",
            "params": [
                {
                    "name": "buffer",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "data",
                "type": "Arraybuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\Base64Utils.js",
            "line": 12,
            "description": "Charset used to encode binary data.",
            "itemtype": "attribute",
            "name": "encoding",
            "type": "{String}",
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\Base64Utils.js",
            "line": 20,
            "description": "Check if some data is encoded as base64.\n\nThis is a fast test that picks some random position in the string to check if they are valid base64 characters.",
            "itemtype": "method",
            "name": "isBase64",
            "params": [
                {
                    "name": "data",
                    "description": "Data to be tested.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if data is base64 encoded, false otherwise.",
                "type": "Boolean"
            },
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\Base64Utils.js",
            "line": 54,
            "description": "Remove base64 header from data.\n\nUsefull for removing the heander from image, audio, video, etc.",
            "itemtype": "method",
            "name": "removeHeader",
            "params": [
                {
                    "name": "base64",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\Base64Utils.js",
            "line": 68,
            "description": "Get the file format present in the base64 string.",
            "itemtype": "method",
            "name": "getFileFormat",
            "params": [
                {
                    "name": "data",
                    "description": "Base64 data.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File format present in the JSON data.",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\Base64Utils.js",
            "line": 83,
            "description": "Create base64 string from arraybuffer.",
            "itemtype": "method",
            "name": "fromArraybuffer",
            "params": [
                {
                    "name": "arraybuffer",
                    "description": "",
                    "type": "Arraybuffer"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\Base64Utils.js",
            "line": 138,
            "description": "Create base64 string from binary string.",
            "itemtype": "method",
            "name": "fromBinaryString",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\BufferUtils.js",
            "line": 12,
            "description": "Create nodejs buffer from arraybuffer",
            "itemtype": "method",
            "name": "fromArrayBuffer",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Arraybuffer"
                }
            ],
            "return": {
                "description": "buffer",
                "type": "Buffer"
            },
            "class": "BufferUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\binary\\ByteArrayUtils.js",
            "line": 14,
            "description": "Create byte array from base64 string data.",
            "itemtype": "method",
            "name": "fromBase64",
            "params": [
                {
                    "name": "base64",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Array"
            },
            "class": "ByteArrayUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\struct\\Tree.js",
            "line": 21,
            "description": "Add new element to tree.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "tree",
                    "description": "Object to be added to the three, if object is not a tree a new tree is created automatically.",
                    "type": "Object"
                }
            ],
            "class": "Tree",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\struct\\Tree.js",
            "line": 44,
            "description": "Remove element from tree.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "tree",
                    "description": "Element to be removed from the three",
                    "type": "Tree"
                }
            ],
            "class": "Tree",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\struct\\Tree.js",
            "line": 64,
            "description": "Clone tree recursively.\n\nThe cloned tree has the same UUID.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Cloned tree.",
                "type": "Tree"
            },
            "class": "Tree",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\struct\\Tree.js",
            "line": 86,
            "description": "Print tree into console, recursively.",
            "itemtype": "method",
            "name": "print",
            "params": [
                {
                    "name": "level",
                    "description": "Recursive parameter, not required.",
                    "type": "Number"
                }
            ],
            "class": "Tree",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\struct\\TreeUtils.js",
            "line": 13,
            "description": "Flag used to indicate ADDED diff.",
            "itemtype": "attribute",
            "name": "DIFF_ADDED",
            "type": "{Number}",
            "class": "TreeUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\struct\\TreeUtils.js",
            "line": 21,
            "description": "Flag used to indicate REMOVED diff.",
            "itemtype": "attribute",
            "name": "DIFF_REMOVED",
            "type": "{Number}",
            "class": "TreeUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\struct\\TreeUtils.js",
            "line": 29,
            "description": "Flag used to indicate MOVED diff.",
            "itemtype": "attribute",
            "name": "DIFF_MOVED",
            "type": "{Number}",
            "class": "TreeUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\struct\\TreeUtils.js",
            "line": 37,
            "description": "Compare two trees and return list of changes.\n\noldTree is compared to newTree. The list of changes indicate wath needs to be changed in oldTree to become wqual to the newTree.\n\nElements inside Trees are compared using their UUID.\n\nThe array returned from this method contains objects in the format {status:<Operation>, uuid: <UUID>, from: <Tree>, to: <Tree>}",
            "static": 1,
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "oldTree",
                    "description": "Old version of Tree.",
                    "type": "Tree"
                },
                {
                    "name": "newTree",
                    "description": "New version of Tree.",
                    "type": "Tree"
                },
                {
                    "name": "diffs",
                    "description": "Recursive parameter (optional).",
                    "type": "Array"
                },
                {
                    "name": "pathOldTree",
                    "description": "Recursive parameter (optional).",
                    "type": "Array"
                },
                {
                    "name": "pathNewTree",
                    "description": "Recursive parameter (optional).",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array with diffs between oldTree and newTree.",
                "type": "Array"
            },
            "class": "TreeUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\struct\\TreeUtils.js",
            "line": 205,
            "description": "Print tree into console, recursively.\n\nTrees are represented by a UUID a parent and a children array.",
            "itemtype": "method",
            "name": "print",
            "params": [
                {
                    "name": "tree",
                    "description": "Tree object to be printed.",
                    "type": "Tree"
                },
                {
                    "name": "level",
                    "description": "Recursive parameter, not required.",
                    "type": "Number"
                }
            ],
            "class": "TreeUtils",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\timer\\AnimationTimer.js",
            "line": 20,
            "description": "Start timer, is the timer is already running dosen't do anything.",
            "itemtype": "method",
            "name": "start",
            "class": "AnimationTimer",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\timer\\AnimationTimer.js",
            "line": 48,
            "description": "Stop animation timer.",
            "itemtype": "method",
            "name": "stop",
            "class": "AnimationTimer",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\timer\\Timer.js",
            "line": 21,
            "description": "Start timer, is the timer is already running dosen't do anything.\n\nThe callback is called right after starting the timer.",
            "itemtype": "method",
            "name": "start",
            "class": "Timer",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\timer\\Timer.js",
            "line": 51,
            "description": "Stop timer.",
            "itemtype": "method",
            "name": "stop",
            "class": "Timer",
            "module": "BinaryUtils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\EventManager.js",
            "line": 13,
            "description": "Stores all events in the manager, their target and callback.\n\nFormat [target, event, callback, active]",
            "itemtype": "attribute",
            "name": "events",
            "type": "{Array}",
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\EventManager.js",
            "line": 24,
            "description": "Add new event to the manager.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "target",
                    "description": "Event target element.",
                    "type": "DOM"
                },
                {
                    "name": "event",
                    "description": "Event name.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function.",
                    "type": "Function"
                }
            ],
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\EventManager.js",
            "line": 37,
            "description": "Destroys this manager and remove all events.",
            "itemtype": "method",
            "name": "clear",
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\EventManager.js",
            "line": 48,
            "description": "Creates all events in this manager.",
            "itemtype": "method",
            "name": "create",
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\EventManager.js",
            "line": 63,
            "description": "Removes all events in this manager.",
            "itemtype": "method",
            "name": "destroy",
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\EventManager.js",
            "line": 78,
            "description": "Add a scroll event to a target element.",
            "itemtype": "method",
            "name": "addScrollEvent",
            "params": [
                {
                    "name": "target",
                    "description": "Event target element.",
                    "type": "DOM"
                },
                {
                    "name": "callback",
                    "description": "Callback function.",
                    "type": "Function"
                }
            ],
            "class": "EventManager",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\LocalStorage.js",
            "line": 11,
            "description": "Store value in the local storage.",
            "static": 1,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LocalStorage",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\LocalStorage.js",
            "line": 31,
            "description": "Get value from the local storage.",
            "static": 1,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value obtained from the storage.",
                "type": "Object"
            },
            "class": "LocalStorage",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\LocalStorage.js",
            "line": 53,
            "description": "Check if a key exists in the local storage.",
            "static": 1,
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the key exists false otherwise.",
                "type": "Boolean"
            },
            "class": "LocalStorage",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\LocalStorage.js",
            "line": 66,
            "description": "Delete a key from the local storage.",
            "static": 1,
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LocalStorage",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\MathUtils.js",
            "line": 12,
            "description": "Value of PI*2. 360 degrees.",
            "itemtype": "attribute",
            "name": "pi2",
            "type": "{Number}",
            "class": "MathUtils",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\MathUtils.js",
            "line": 20,
            "description": "Value of PI/3. 60 degrees.",
            "itemtype": "attribute",
            "name": "pid3",
            "type": "{Number}",
            "class": "MathUtils",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\MathUtils.js",
            "line": 28,
            "description": "Value of PI/2. 45 degrees.",
            "itemtype": "attribute",
            "name": "pid2",
            "type": "{Number}",
            "class": "MathUtils",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\MathUtils.js",
            "line": 36,
            "description": "Generates a random color code.\n\nUses the #RRGGBB format.",
            "itemtype": "method",
            "name": "randomColor",
            "return": {
                "description": "Generated color code.",
                "type": "String"
            },
            "class": "MathUtils",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\ObjectUtils.js",
            "line": 12,
            "description": "Get object tree root.\n\nFor a object placed inside a running scene the root is always the program.",
            "itemtype": "method",
            "name": "getRoot",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "root",
                "type": "Object3D"
            },
            "class": "ObjectUtils",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\ObjectUtils.js",
            "line": 33,
            "description": "Scale and center object into a unitary box, using its geometry.",
            "itemtype": "method",
            "name": "scaleAndCenterObject",
            "params": [
                {
                    "name": "object",
                    "description": "Object to be positioned and scaled.",
                    "type": "Object3D"
                }
            ],
            "class": "ObjectUtils",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\ObjectUtils.js",
            "line": 59,
            "description": "Calculates a bouding box for an object considering all its children.",
            "itemtype": "method",
            "name": "calculateBoudingBox",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "Bouding box calculated.",
                "type": "Box3"
            },
            "class": "ObjectUtils",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\ObjectUtils.js",
            "line": 97,
            "description": "Recalculate all children origins, to be centered with their geometry.",
            "itemtype": "method",
            "name": "recalculateGeometryOrigin",
            "params": [
                {
                    "name": "object",
                    "description": "Object to recalculate origin of.",
                    "type": "Object3D"
                }
            ],
            "class": "ObjectUtils",
            "module": "Utils"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 17,
            "description": "Type is used to indentify the type of cannonjs:\n - BOX\n - CYLINDER\n - SPHERE\n - HULL",
            "itemtype": "attribute",
            "name": "Type",
            "type": "{Object}",
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 35,
            "description": "Given a Object3D instance, creates a corresponding CANNON shape.",
            "itemtype": "method",
            "name": "createShape",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "type",
                    "description": "PhysicsGenerator.Type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Shape"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 97,
            "description": "Create box shape from geometry.",
            "itemtype": "method",
            "name": "createBoxShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Box"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 120,
            "description": "Bounding box needs to be computed with the entire mesh, not just geometry.",
            "itemtype": "method",
            "name": "createBoundingBoxShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Box"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 147,
            "description": "Computes 3D convex hull as a CANNON.ConvexPolyhedron.",
            "itemtype": "method",
            "name": "createConvexPolyhedron",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "ConvexPolyhedron"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Shape"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 189,
            "description": "Create cylinder shape from geometry.",
            "itemtype": "method",
            "name": "createCylinderShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Cylinder"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 207,
            "description": "Create cylinder shape from bounding cylinder calculated from bounding box and bouding sphere.",
            "itemtype": "method",
            "name": "createBoundingCylinderShape",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Cylinder"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 235,
            "description": "Plane shape from geometry.",
            "itemtype": "method",
            "name": "createPlaneShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Box"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 250,
            "description": "Sphere shape from geometry.",
            "itemtype": "method",
            "name": "createSphereShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Sphere"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 262,
            "description": "Sphere shape from bouding sphere.",
            "itemtype": "method",
            "name": "createBoundingSphereShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Sphere"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 277,
            "description": "Sphere shape from bouding sphere.",
            "itemtype": "method",
            "name": "createTubeShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Trimesh"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 291,
            "description": "Trimesh shape from geometry.",
            "itemtype": "method",
            "name": "createTrimeshShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Trimesh"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 311,
            "description": "Returns a single geometry for the given object.\n\nIf the object is compound, its geometries are automatically merged.",
            "itemtype": "method",
            "name": "getGeometry",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "Geometry that contains all merger geometry",
                "type": "Geometry"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 373,
            "description": "Get geometry vertices.",
            "itemtype": "method",
            "name": "getVertices",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\utils\\PhysicsGenerator.js",
            "line": 389,
            "description": "Returns a array of THREE.Mesh instances from the given object.\n\nIf nested transformations are found, they are applied to child meshes as mesh.userData.matrix, so that each mesh has its position/rotation/scale independently of all of its parents except the top-level object.",
            "itemtype": "method",
            "name": "getMeshes",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "meshes found inside the Object3D",
                "type": "Array"
            },
            "class": "PhysicsGenerator",
            "module": "Physics"
        },
        {
            "file": "..\\..\\source\\core\\vr\\VRControls.js",
            "line": 13,
            "description": "VR display.",
            "itemtype": "property",
            "name": "display",
            "type": "{Object}",
            "class": "VRControls",
            "module": "VirtualReality"
        },
        {
            "file": "..\\..\\source\\core\\vr\\VRControls.js",
            "line": 20,
            "description": "Scale from real units to world units.",
            "itemtype": "property",
            "name": "scale",
            "type": "{Number}",
            "class": "VRControls",
            "module": "VirtualReality"
        },
        {
            "file": "..\\..\\source\\core\\vr\\VRControls.js",
            "line": 27,
            "description": "Standing property, is set true the user height will be added to the position of the HMD.",
            "itemtype": "property",
            "name": "standing",
            "type": "{boolean}",
            "class": "VRControls",
            "module": "VirtualReality"
        },
        {
            "file": "..\\..\\source\\core\\vr\\VRControls.js",
            "line": 34,
            "description": "User height, used to calibrate when the user is standing.",
            "itemtype": "property",
            "name": "userHeight",
            "type": "{Number}",
            "class": "VRControls",
            "module": "VirtualReality"
        },
        {
            "file": "..\\..\\source\\core\\vr\\VRControls.js",
            "line": 41,
            "description": "VR Frame data.",
            "itemtype": "property",
            "name": "frameData",
            "type": "{VRFrameData}",
            "class": "VRControls",
            "module": "VirtualReality"
        },
        {
            "file": "..\\..\\source\\core\\vr\\VRControls.js",
            "line": 75,
            "description": "Update VRControls object state.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "object",
                    "description": "Object to be updated",
                    "type": "Object3D"
                }
            ],
            "class": "VRControls",
            "module": "VirtualReality"
        },
        {
            "file": "..\\..\\source\\core\\vr\\VRControls.js",
            "line": 130,
            "description": "Dispose object.",
            "itemtype": "method",
            "name": "dispose",
            "class": "VRControls",
            "module": "VirtualReality"
        },
        {
            "file": "..\\..\\source\\core\\vr\\VRControls.js",
            "line": 140,
            "description": "Reset the HDM pose.",
            "itemtype": "method",
            "name": "resetPose",
            "class": "VRControls",
            "module": "VirtualReality"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 22,
            "description": "Check if a file corresponds to a remote location.",
            "itemtype": "method",
            "name": "isRemote",
            "return": {
                "description": "If the file is remote returns true, false otherwise.",
                "type": "Boolean"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 33,
            "description": "Read file content as text.",
            "itemtype": "method",
            "name": "readFile",
            "params": [
                {
                    "name": "fname",
                    "description": "URL to the file.",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file will be read in sync.",
                    "type": "Boolean"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback.",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "onProgress callback.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "File content as a string, null if reading async.",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 106,
            "description": "Read file as arraybuffer data.",
            "itemtype": "method",
            "name": "readFileArrayBuffer",
            "params": [
                {
                    "name": "fname",
                    "description": "Name of the file",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file will be read in sync.",
                    "type": "Boolean"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback.",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "onProgress callback.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "File data as array buffer, null on error",
                "type": "ArrayBuffer"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 191,
            "description": "Read file as base64 data.",
            "itemtype": "method",
            "name": "readFileBase64",
            "params": [
                {
                    "name": "fname",
                    "description": "Name of the file",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file will be read in sync.",
                    "type": "Boolean"
                },
                {
                    "name": "onLoad",
                    "description": "onLoad callback.",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "onProgress callback.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "File data in base64, null on error",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 258,
            "description": "Write text file.\n\nWhen running without NWJS it writes file as a blob and auto downloads it.",
            "itemtype": "method",
            "name": "writeFile",
            "params": [
                {
                    "name": "fname",
                    "description": "Name/path of the file to write.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Text to be written to the file.",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file is written syncronously. (Only available for Nodejs).",
                    "type": "Boolean"
                },
                {
                    "name": "onFinish",
                    "description": "Callback function called when the file is written.",
                    "type": "Function"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 317,
            "description": "Write binary file using base64 data.\n\nIf running on browser writes the file into a blob and auto downloads it.",
            "itemtype": "method",
            "name": "writeFileBase64",
            "params": [
                {
                    "name": "fname",
                    "description": "Name/path of the file to write.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Base64 data to be written into the file.",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file is written syncronously. (Only available for Nodejs)",
                    "type": "Boolean"
                },
                {
                    "name": "onFinish",
                    "description": "Callback function called when the file is written.",
                    "type": "Function"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 380,
            "description": "Write binary file using arraybuffer data. \n\nIf running on browser writes the file into a blob and auto downloads it.",
            "itemtype": "method",
            "name": "writeFileArrayBuffer",
            "params": [
                {
                    "name": "fname",
                    "description": "Name/path of the file to write.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Arraybuffer data to be written into the file.",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true the file is written syncronously. (Only available for Nodejs)",
                    "type": "Boolean"
                },
                {
                    "name": "onFinish",
                    "description": "Callback function called when the file is written.",
                    "type": "Function"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 442,
            "description": "Open file chooser dialog receives onLoad callback, file filter, saveas.\n\nSave mode does not work inside the browser.\n\nThe onLoad callback receives as array of files as parameter.",
            "itemtype": "method",
            "name": "chooseFile",
            "params": [
                {
                    "name": "onLoad",
                    "description": "onLoad callback that receives array of files choosen as parameter",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "File type filter",
                    "type": "String"
                },
                {
                    "name": "saveas",
                    "description": "Save as format can be also a boolean value",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 484,
            "description": "Used as an alternative to chooseFile for saving files in the browser.\n\nUses a prompt to question the user the file name.",
            "itemtype": "method",
            "name": "chooseFileName",
            "params": [
                {
                    "name": "onLoad",
                    "description": "onLoad callback",
                    "type": "Function"
                },
                {
                    "name": "saveas",
                    "description": "File extension",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 511,
            "description": "Copy file (cannot be used to copy folders).\n\nOnly works when running inside NWJS.",
            "itemtype": "method",
            "name": "copyFile",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dst",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 538,
            "description": "Make a directory (dont trow exeption if directory already exists).\n\nOnly works when running inside NWJS.",
            "itemtype": "method",
            "name": "makeDirectory",
            "params": [
                {
                    "name": "dir",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 555,
            "description": "Returns files in directory (returns empty array in case of error).\n\nOnly works when running inside NWJS.",
            "itemtype": "method",
            "name": "getFilesDirectory",
            "return": {
                "description": "Files in the directory",
                "type": "Array"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 581,
            "description": "Delete folders and all subfolders.\n\nOnly works when running inside NWJS.",
            "itemtype": "method",
            "name": "deleteFolder",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 614,
            "description": "Copy folder and all its files (includes symbolic links).\n\nOnly works when running inside NWJS.",
            "itemtype": "method",
            "name": "copyFolder",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dst",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 658,
            "description": "Check if a file exists.\n\nOnly works inside of NWJS. When running inside the browser always returns false.",
            "itemtype": "method",
            "name": "fileExists",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True is file exists",
                "type": "Boolean"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 679,
            "description": "Get file name without extension from file path string.\n\nIf input is a/b/c/abc.d output is abc.",
            "itemtype": "method",
            "name": "getFileName",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File name without path and extension",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 701,
            "description": "Get file name with extension from file path string.\n\nIf input is a/b/c/abc.d output is abc.d.",
            "itemtype": "method",
            "name": "getFileNameWithExtension",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File name without path with extension",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 723,
            "description": "Get file name without extension.\n\nIf input is a/b/c/abc.d output is a/b/c/abc.",
            "itemtype": "method",
            "name": "getNameWithoutExtension",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 742,
            "description": "Get file directoty.\n\nIf input is a/b/c/abc.d output is a/b/c/",
            "itemtype": "method",
            "name": "getFilePath",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\FileSystem.js",
            "line": 764,
            "description": "Get file extension from file path string (always in lowercase).\n\nIf input is a/b/c/abc.d output is d.",
            "itemtype": "method",
            "name": "getFileExtension",
            "params": [
                {
                    "name": "file",
                    "description": "File path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Files"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 16,
            "description": "nunuStudio",
            "itemtype": "attribute",
            "name": "NAME",
            "type": "{String}",
            "default": "\"nunuStudio\"",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 25,
            "description": "Stores the nunu runtime version.",
            "itemtype": "attribute",
            "name": "VERSION",
            "type": "{String}",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 33,
            "description": "Stores the nunu runtime dev timestamp.",
            "itemtype": "attribute",
            "name": "TIMESTAMP",
            "type": "{String}",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 41,
            "description": "Check if host supports WebVR and if there is a VR display available.",
            "itemtype": "method",
            "name": "webvrAvailable",
            "return": {
                "description": "True is WebVR is available.",
                "type": "Boolean"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 52,
            "description": "Used to get the first VR display available, the display is returned as argument of the getDisplay function.",
            "itemtype": "method",
            "name": "getVRDisplays",
            "params": [
                {
                    "name": "getDisplay",
                    "description": "Function used to get the display, receives the display as argument.",
                    "type": "Function"
                }
            ],
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 79,
            "description": "Get the query parameter from the browser URL.",
            "itemtype": "method",
            "name": "getQueryParameters",
            "return": {
                "description": "Object with parameters read from the URL.",
                "type": "Object"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 104,
            "description": "Create a web worker from code written in a string.\n\nUses a blob to inject the code and loads it from and URL object.",
            "itemtype": "method",
            "name": "createWorker",
            "params": [
                {
                    "name": "code",
                    "description": "Javascript code for this worker.",
                    "type": "String"
                },
                {
                    "name": "onMessage",
                    "description": "On message worker callback.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns a worker instance (for comunication).",
                "type": "Worker"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 127,
            "description": "Check if host supports WebAudio.",
            "itemtype": "method",
            "name": "webAudioAvailable",
            "return": {
                "description": "True if WebAudio is available.",
                "type": "Boolean"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 138,
            "description": "Check if host supports WebGL, only checks for WebGL 1.0 support.",
            "itemtype": "method",
            "name": "webglAvailable",
            "return": {
                "description": "True if WebGL is available.",
                "type": "Boolean"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 161,
            "description": "Check if nunu if running in development mode.",
            "itemtype": "method",
            "name": "developmentMode",
            "return": {
                "description": "True if running as development mode.",
                "type": "Boolean"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 176,
            "description": "Check in wich platform the enviroment is running.",
            "itemtype": "method",
            "name": "getPlatform",
            "return": {
                "description": "Indicates the platform type.",
                "type": "Number"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 196,
            "description": "Check if nunu is running inside NWJS.",
            "itemtype": "method",
            "name": "runningOnDesktop",
            "return": {
                "description": "True if running inside NWJS",
                "type": "Boolean"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 207,
            "description": "Check if there is some element on fullscreen mode.\n\nReturns true even the fullscreen element is not related with the app.",
            "itemtype": "method",
            "name": "isFullscreen",
            "return": {
                "description": "True if there is some element in fullscreen mode.",
                "type": "Boolean"
            },
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 220,
            "description": "Open a webpage on a new window.\n\nOn desktop and mobile it will open the default browser.\n\nOn the web it will open as a popup.",
            "itemtype": "method",
            "name": "openWebpage",
            "class": "Nunu",
            "module": "Runtime"
        },
        {
            "file": "..\\..\\source\\core\\Nunu.js",
            "line": 241,
            "description": "Set an element into fullscreen mode or exit out of fullscreen mode.\n\nUse isFullscreen to check if the application is running in fullscreen mode already.",
            "itemtype": "method",
            "name": "setFullscreen",
            "params": [
                {
                    "name": "enable",
                    "description": "If true the application will enter fullscreen mode, if false it will exit.",
                    "type": "Boolean"
                },
                {
                    "name": "element",
                    "description": "DOM element to put into fullscreen.",
                    "type": "DOM"
                }
            ],
            "class": "Nunu",
            "module": "Runtime"
        }
    ],
    "warnings": []
}